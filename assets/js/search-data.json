{"0": {
    "doc": "Blinking Indicators",
    "title": "Blinking Indicators",
    "content": "Visual feedback system that highlights active joints and provides user interaction cues. ",
    "url": "/miko-unity-docs/docs/Topics/blinking_indicators/",
    
    "relUrl": "/docs/Topics/blinking_indicators/"
  },"1": {
    "doc": "Blinking Indicators",
    "title": "Table of Contents",
    "content": ". | Overview | Indicator Types . | Static Indicators | Blinking Indicators | Interactive Indicators | . | Indicator Prefabs . | Indicator Prefab | JointIndicators Prefab | . | Animation System . | Blinking Patterns . | Selection Blink | Hover Blink | Error Blink | . | Animation States | . | Visual Feedback System . | Color Coding | Size Scaling | Transparency Effects | . | Interaction Integration . | Mouse Hover Detection | Selection Feedback | Manipulation Feedback | . | Performance Optimization . | LOD System | Culling System | Animation Optimization | . | Configuration Settings . | Indicator Appearance | Animation Settings | . | Troubleshooting . | Indicators Not Visible | Animation Not Working | Performance Issues | Mouse Interaction Problems | . | Best Practices . | Visual Design | Performance | User Experience | . | . ",
    "url": "/miko-unity-docs/docs/Topics/blinking_indicators/#table-of-contents",
    
    "relUrl": "/docs/Topics/blinking_indicators/#table-of-contents"
  },"2": {
    "doc": "Blinking Indicators",
    "title": "Overview",
    "content": "The Blinking Indicators system provides visual feedback to users by highlighting joints, showing interaction states, and guiding pose manipulation. This system uses animated markers to communicate system status and available interactions. ",
    "url": "/miko-unity-docs/docs/Topics/blinking_indicators/#overview",
    
    "relUrl": "/docs/Topics/blinking_indicators/#overview"
  },"3": {
    "doc": "Blinking Indicators",
    "title": "Indicator Types",
    "content": "Static Indicators . Purpose: Show joint positions and hierarchy . | Always visible joint markers | Consistent size regardless of distance | Color-coded by joint type or importance | Base visualization for all joints | . Blinking Indicators . Purpose: Highlight active or selected joints . | Animated pulsing or blinking effect | Attention-grabbing visual feedback | State-dependent activation | User interaction response | . Interactive Indicators . Purpose: Show joints available for manipulation . | Hover effects when mouse is nearby | Click feedback when selected | Drag indicators during manipulation | Context-sensitive appearance | . ",
    "url": "/miko-unity-docs/docs/Topics/blinking_indicators/#indicator-types",
    
    "relUrl": "/docs/Topics/blinking_indicators/#indicator-types"
  },"4": {
    "doc": "Blinking Indicators",
    "title": "Indicator Prefabs",
    "content": "Indicator Prefab . Location: Root level in scene hierarchy Purpose: Template for standard joint visualization Components: . | Mesh Renderer: Visual sphere or shape | Material: Color and transparency settings | Collider: Mouse interaction detection | Animation: Basic scaling/fading effects | . JointIndicators Prefab . Location: Root level in scene hierarchy Purpose: Template for animated feedback indicators Components: . | Animator: Controls blinking animations | Particle System: Advanced visual effects | Audio Source: Optional sound feedback | Script Components: Custom behavior logic | . ",
    "url": "/miko-unity-docs/docs/Topics/blinking_indicators/#indicator-prefabs",
    
    "relUrl": "/docs/Topics/blinking_indicators/#indicator-prefabs"
  },"5": {
    "doc": "Blinking Indicators",
    "title": "Animation System",
    "content": "Blinking Patterns . Different animation types for different states: . Selection Blink . // Steady pulsing for selected joints AnimationCurve pulseCurve = AnimationCurve.EaseInOut(0, 0.5f, 1, 1.5f); indicator.transform.localScale = Vector3.one * pulseCurve.Evaluate(time); . Hover Blink . // Quick flash when mouse hovers over joint if (isHovering) { indicator.material.color = Color.Lerp(baseColor, highlightColor, flashIntensity); } . Error Blink . // Rapid red flashing for constraint violations Color errorColor = Color.red; float blinkSpeed = 5f; indicator.material.color = Color.Lerp(baseColor, errorColor, Mathf.Sin(Time.time * blinkSpeed)); . Animation States . The indicator system uses different animation states: . | State | Visual Effect | Trigger Condition | . | Idle | Static display | No interaction | . | Hover | Gentle highlight | Mouse nearby | . | Selected | Steady pulse | Joint selected | . | Active | Bright glow | Joint being manipulated | . | Constrained | Red flash | Movement restricted | . | IK Target | Blue pulse | IK endpoint | . ",
    "url": "/miko-unity-docs/docs/Topics/blinking_indicators/#animation-system",
    
    "relUrl": "/docs/Topics/blinking_indicators/#animation-system"
  },"6": {
    "doc": "Blinking Indicators",
    "title": "Visual Feedback System",
    "content": "Color Coding . Indicators use color to convey information: . | White/Gray: Unselected joints | Yellow: Hovered joints | Green: Selected joints | Blue: IK target joints | Red: Constrained or error state | Purple: Multi-selected joints | . Size Scaling . Indicator size conveys importance: . // Scale based on joint hierarchy level float baseSize = 0.1f; float hierarchyMultiplier = 1.0f + (jointLevel * 0.2f); indicator.transform.localScale = Vector3.one * baseSize * hierarchyMultiplier; . Transparency Effects . Alpha blending for depth and focus: . | Full opacity: Active and selected joints | Medium opacity: Available joints | Low opacity: Background/inactive joints | Fading: Joints moving out of interaction range | . ",
    "url": "/miko-unity-docs/docs/Topics/blinking_indicators/#visual-feedback-system",
    
    "relUrl": "/docs/Topics/blinking_indicators/#visual-feedback-system"
  },"7": {
    "doc": "Blinking Indicators",
    "title": "Interaction Integration",
    "content": "Mouse Hover Detection . void OnMouseEnter() { StartBlinking(BlinkType.Hover); ShowJointTooltip(); } void OnMouseExit() { StopBlinking(); HideJointTooltip(); } . Selection Feedback . void OnJointSelected() { // Stop any existing animations StopAllCoroutines(); // Start selection animation StartBlinking(BlinkType.Selected); // Show rotation gizmo ShowRotationGizmo(); } . Manipulation Feedback . void OnJointManipulation() { // Enhanced visibility during manipulation SetBlinkIntensity(1.5f); // Show constraint boundaries ShowJointConstraints(); // Update related joint indicators UpdateChainIndicators(); } . ",
    "url": "/miko-unity-docs/docs/Topics/blinking_indicators/#interaction-integration",
    
    "relUrl": "/docs/Topics/blinking_indicators/#interaction-integration"
  },"8": {
    "doc": "Blinking Indicators",
    "title": "Performance Optimization",
    "content": "LOD System . Reduce indicator complexity at distance: . float distanceToCamera = Vector3.Distance(transform.position, Camera.main.transform.position); if (distanceToCamera &gt; lodDistance) { // Simplify indicator DisableParticleEffects(); ReduceAnimationFramerate(); } . Culling System . Hide indicators outside view: . | Frustum culling: Don’t animate off-screen indicators | Occlusion culling: Hide indicators behind geometry | Priority system: Always show selected indicators | . Animation Optimization . Efficient animation updates: . // Use object pooling for indicators public class IndicatorPool : MonoBehaviour { private Queue&lt;GameObject&gt; availableIndicators; public GameObject GetIndicator() { return availableIndicators.Count &gt; 0 ? availableIndicators.Dequeue() : Instantiate(indicatorPrefab); } } . ",
    "url": "/miko-unity-docs/docs/Topics/blinking_indicators/#performance-optimization",
    
    "relUrl": "/docs/Topics/blinking_indicators/#performance-optimization"
  },"9": {
    "doc": "Blinking Indicators",
    "title": "Configuration Settings",
    "content": "Indicator Appearance . Customizable visual properties: . | Property | Description | Default Value | . | Base Color | Default indicator color | Light Gray | . | Hover Color | Mouse hover highlight | Yellow | . | Select Color | Selection highlight | Green | . | Error Color | Constraint violation | Red | . | Size Multiplier | Scale factor | 1.0 | . | Transparency | Base alpha value | 0.8 | . Animation Settings . Customizable animation properties: . | Property | Description | Default Value | . | Blink Speed | Animation frequency | 2.0 Hz | . | Pulse Intensity | Scale variation | 0.5x to 1.5x | . | Fade Duration | Transition time | 0.3 seconds | . | Hover Delay | Hover activation time | 0.1 seconds | . ",
    "url": "/miko-unity-docs/docs/Topics/blinking_indicators/#configuration-settings",
    
    "relUrl": "/docs/Topics/blinking_indicators/#configuration-settings"
  },"10": {
    "doc": "Blinking Indicators",
    "title": "Troubleshooting",
    "content": "Indicators Not Visible . | Check: Indicator layer is enabled in camera | Verify: Indicator prefabs exist in scene hierarchy | Ensure: Materials have proper shaders assigned | . Animation Not Working . | Check: Animator components are enabled | Verify: Animation clips are assigned | Debug: Animation state machine transitions | . Performance Issues . | Reduce: Number of simultaneous animations | Implement: LOD system for distant indicators | Optimize: Animation update frequency | . Mouse Interaction Problems . | Check: Colliders are enabled on indicators | Verify: EventSystem GameObject is active | Ensure: No UI elements blocking raycasts | . ",
    "url": "/miko-unity-docs/docs/Topics/blinking_indicators/#troubleshooting",
    
    "relUrl": "/docs/Topics/blinking_indicators/#troubleshooting"
  },"11": {
    "doc": "Blinking Indicators",
    "title": "Best Practices",
    "content": "Visual Design . | Use consistent color schemes across all indicators | Provide clear visual hierarchy with size/color | Avoid overwhelming users with too many animations | Test visibility under different lighting conditions | . Performance . | Pool indicator objects to reduce garbage collection | Use LOD systems for complex scenes | Batch animation updates when possible | Cull off-screen indicators aggressively | . User Experience . | Provide immediate feedback for all interactions | Use consistent animation patterns | Avoid conflicting visual states | Test with different user interaction speeds | . For more information about joint selection and manipulation, see Joint Structure and Rotation Gizmo. ",
    "url": "/miko-unity-docs/docs/Topics/blinking_indicators/#best-practices",
    
    "relUrl": "/docs/Topics/blinking_indicators/#best-practices"
  },"12": {
    "doc": "Camera Movement",
    "title": "Camera Movement",
    "content": "Understanding the camera control system for navigating around the 3D pose character. ",
    "url": "/miko-unity-docs/docs/Topics/camera_movement/",
    
    "relUrl": "/docs/Topics/camera_movement/"
  },"13": {
    "doc": "Camera Movement",
    "title": "Table of Contents",
    "content": ". | Overview | Camera Controls . | Mouse Controls | Keyboard Controls | . | Camera Hierarchy . | CameraParent GameObject | mainCamera GameObject | . | Camera Behavior . | Orbit Mode | Zoom Constraints | Auto-Framing | . | Pose Bounding Box . | Purpose | Implementation | . | Advanced Features . | Smooth Camera Transitions | Camera Presets | . | Configuration . | Camera Settings | Performance Optimization | . | Troubleshooting . | Camera Not Moving | Jerky Camera Movement | Camera Stuck or Inverted | . | . ",
    "url": "/miko-unity-docs/docs/Topics/camera_movement/#table-of-contents",
    
    "relUrl": "/docs/Topics/camera_movement/#table-of-contents"
  },"14": {
    "doc": "Camera Movement",
    "title": "Overview",
    "content": "The camera system allows users to orbit, zoom, and pan around the pose character for optimal viewing angles during pose manipulation. The system is built around the CameraController script attached to the main camera. ",
    "url": "/miko-unity-docs/docs/Topics/camera_movement/#overview",
    
    "relUrl": "/docs/Topics/camera_movement/#overview"
  },"15": {
    "doc": "Camera Movement",
    "title": "Camera Controls",
    "content": "Mouse Controls . | Left Click + Drag: Orbit camera around the character | Right Click + Drag: Pan camera horizontally and vertically | Mouse Wheel: Zoom in/out towards the character | Middle Click + Drag: Alternative pan control | . Keyboard Controls . | WASD: Move camera position | QE: Move camera up/down | Shift: Increase movement speed | Ctrl: Decrease movement speed | . ",
    "url": "/miko-unity-docs/docs/Topics/camera_movement/#camera-controls",
    
    "relUrl": "/docs/Topics/camera_movement/#camera-controls"
  },"16": {
    "doc": "Camera Movement",
    "title": "Camera Hierarchy",
    "content": "CameraParent GameObject . | Purpose: Container for camera system | Components: . | Camera Controller Script | Pose Bounding Box Script | . | . mainCamera GameObject . | Purpose: Primary rendering camera | Components: . | Camera component | Transform Gizmo Script | . | . ",
    "url": "/miko-unity-docs/docs/Topics/camera_movement/#camera-hierarchy",
    
    "relUrl": "/docs/Topics/camera_movement/#camera-hierarchy"
  },"17": {
    "doc": "Camera Movement",
    "title": "Camera Behavior",
    "content": "Orbit Mode . The default camera mode orbits around a focal point: . // Camera orbits around the character center Vector3 focusPoint = characterBounds.center; . Zoom Constraints . | Minimum Distance: Prevents camera from getting too close | Maximum Distance: Limits how far camera can zoom out | Smooth Interpolation: Gradual zoom transitions | . Auto-Framing . The camera automatically adjusts to frame the character: . | Calculates character bounds | Adjusts zoom level appropriately | Maintains optimal viewing distance | . ",
    "url": "/miko-unity-docs/docs/Topics/camera_movement/#camera-behavior",
    
    "relUrl": "/docs/Topics/camera_movement/#camera-behavior"
  },"18": {
    "doc": "Camera Movement",
    "title": "Pose Bounding Box",
    "content": "Purpose . The Pose Bounding Box Script calculates the character’s spatial boundaries to: . | Determine optimal camera distance | Set orbit focal point | Enable auto-framing features | . Implementation . // Calculate character bounds Bounds characterBounds = CalculateCharacterBounds(); camera.SetFocusPoint(characterBounds.center); . ",
    "url": "/miko-unity-docs/docs/Topics/camera_movement/#pose-bounding-box",
    
    "relUrl": "/docs/Topics/camera_movement/#pose-bounding-box"
  },"19": {
    "doc": "Camera Movement",
    "title": "Advanced Features",
    "content": "Smooth Camera Transitions . | Interpolated Movement: Smooth camera transitions between positions | Easing Functions: Natural acceleration/deceleration curves | Customizable Speed: Adjustable movement and rotation speeds | . Camera Presets . | Front View: Character facing camera | Side View: Profile view of character | Back View: Rear view of character | Custom Positions: Save and recall favorite camera angles | . ",
    "url": "/miko-unity-docs/docs/Topics/camera_movement/#advanced-features",
    
    "relUrl": "/docs/Topics/camera_movement/#advanced-features"
  },"20": {
    "doc": "Camera Movement",
    "title": "Configuration",
    "content": "Camera Settings . Key parameters that can be adjusted: . | Setting | Description | Default Value | . | Orbit Speed | Rotation sensitivity | 2.0 | . | Zoom Speed | Zoom sensitivity | 5.0 | . | Pan Speed | Pan movement speed | 1.0 | . | Min Distance | Closest zoom level | 1.0 | . | Max Distance | Furthest zoom level | 10.0 | . Performance Optimization . | Frustum Culling: Only render visible objects | LOD System: Reduce detail at distance | Occlusion Culling: Hide objects behind others | . ",
    "url": "/miko-unity-docs/docs/Topics/camera_movement/#configuration",
    
    "relUrl": "/docs/Topics/camera_movement/#configuration"
  },"21": {
    "doc": "Camera Movement",
    "title": "Troubleshooting",
    "content": "Camera Not Moving . | Check: Camera Controller script is enabled | Verify: Input system is receiving mouse/keyboard events | Solution: Ensure EventSystem GameObject is active | . Jerky Camera Movement . | Cause: Frame rate issues or input sensitivity too high | Solution: Adjust camera speed settings or enable smoothing | . Camera Stuck or Inverted . | Reset: Call ResetCameraPosition() method | Check: Camera constraints and bounds are properly set | . For information about the overall scene setup, see Scene Initialization. ",
    "url": "/miko-unity-docs/docs/Topics/camera_movement/#troubleshooting",
    
    "relUrl": "/docs/Topics/camera_movement/#troubleshooting"
  },"22": {
    "doc": "Deployment Guide",
    "title": "Deployment Guide",
    "content": "Learn how to build and deploy the Unity project for WebGL and iOS platforms. ",
    "url": "/miko-unity-docs/docs/deployment/",
    
    "relUrl": "/docs/deployment/"
  },"23": {
    "doc": "Deployment Guide",
    "title": "Table of Contents",
    "content": ". | WebGL Deployment . | Build Configuration | Testing Build | Web Integration | . | iOS Deployment . | Unity Build Setup | Xcode Integration | Common Issues | . | Next Steps | . ",
    "url": "/miko-unity-docs/docs/deployment/#table-of-contents",
    
    "relUrl": "/docs/deployment/#table-of-contents"
  },"24": {
    "doc": "Deployment Guide",
    "title": "WebGL Deployment",
    "content": "Build Configuration . | Open Build Settings . Navigate to File &gt; Build Settings in Unity Editor. | Configure WebGL Settings . Ensure the following settings are configured: . | Platform: Select WebGL tab | Scenes: Only LoadAll scene should be checked | Code Optimization: . | Use Shorter Build Time for testing | Use Disk Size with LTO for production deployment | . | . | . Testing Build . | Development Testing . Set Code Optimization to Shorter Build Time, then go to File &gt; Build and Run to test in a simulated online environment. | Production Build . After testing, change Code Optimization to Disk Size with LTO and build the Unity project to Builds/WebGL/ folder. | . Web Integration . | Deploy to Web Application . Copy all built files from the Unity WebGL build output to your web application: . Source: UnityProject/Builds/WebGL/ Destination: mikomiko-next-app/public/WebGL/ . | Test Deployment . Run the website locally to verify your changes: . npm run build . | . | Use Disk Size with LTO for production builds to minimize file size | Test with Shorter Build Time during development for faster iteration | . ",
    "url": "/miko-unity-docs/docs/deployment/#webgl-deployment",
    
    "relUrl": "/docs/deployment/#webgl-deployment"
  },"25": {
    "doc": "Deployment Guide",
    "title": "iOS Deployment",
    "content": "Unity Build Setup . | Configure iOS Platform . | Go to File &gt; Build Settings | Switch Platform from WebGL to iOS | Build the Unity project and save to Builds/iOS/ folder | . | . Xcode Integration . | Open Xcode Project . Launch mikodemo.xcodeproj in Xcode. | Unity Framework Setup . Check Unity-iPhone presence: . | If Unity-iPhone is expandable in the project navigator, skip to step 4 | If not expandable, remove the reference and proceed to step 4 | . | Import Unity Project . Drag Unity-iPhone.xcodeproj from Builds/iOS/ folder into your Xcode project. Configure frameworks: . | Re-import the UnityFramework.framework library in Xcode | Select the Data folder and check the Target Membership box next to UnityFramework | . | Configure Native Plugins . Navigate to Unity-iPhone &gt; Libraries &gt; Plugins &gt; iOS: . Set Target Membership to Public for: . | NativeCallProxy.h | NativeState.h | . Under Target Membership, ensure UnityFramework is set to Public. | Update UnityFramework Header . Add this include statement to the top of the UnityFramework.h file. #include \"NativeCallProxy.h\" . | . Common Issues . | Missing scenes: Ensure only LoadAll scene is included in build | Too little Memory: Sometimes the iOS Build fails because there is too little free memory. Make sure to clean memory inside XCode once in a while | Animations not Working: If we are still using the animation method for loading poses, please go Canvas &gt; SideMenu &gt; Scroll View &gt; Viewport &gt; Content inside the scene, right click on the component Auto Fill Pose(Script) and click on generate pose libraries. | . ",
    "url": "/miko-unity-docs/docs/deployment/#ios-deployment",
    
    "relUrl": "/docs/deployment/#ios-deployment"
  },"26": {
    "doc": "Deployment Guide",
    "title": "Next Steps",
    "content": ". | Return to Project Overview for scene structure information | View Getting Started Guide for initial setup | . ",
    "url": "/miko-unity-docs/docs/deployment/#next-steps",
    
    "relUrl": "/docs/deployment/#next-steps"
  },"27": {
    "doc": "Hand Editor",
    "title": "Hand Editor",
    "content": "Advanced hand pose editing system for precise finger and thumb positioning. ",
    "url": "/miko-unity-docs/docs/Topics/hand_editor/",
    
    "relUrl": "/docs/Topics/hand_editor/"
  },"28": {
    "doc": "Hand Editor",
    "title": "Table of Contents",
    "content": ". | Overview | Accessing Hand Editor . | Opening the Interface | Hand Editor Window | . | Hand Anatomy Structure . | Finger Organization . | Thumb (Pollex) | Index Finger | Middle, Ring, and Pinky Fingers | . | . | Hand Posing Controls . | Individual Finger Control | Muscle Group System | Preset Hand Poses | . | Hand Editor Interface . | Control Panels . | Finger Tabs | Rotation Controls | Preset Buttons | . | . | Advanced Features . | Hand Mirroring | Anatomical Constraints | Real-time Preview | . | Hand Posing Workflow . | Basic Hand Editing | Advanced Techniques | . | Integration with Main System . | Joint System Connection | Animation System | . | Troubleshooting . | Hand Editor Not Opening | Unnatural Hand Poses | Performance Issues | . | . ",
    "url": "/miko-unity-docs/docs/Topics/hand_editor/#table-of-contents",
    
    "relUrl": "/docs/Topics/hand_editor/#table-of-contents"
  },"29": {
    "doc": "Hand Editor",
    "title": "Overview",
    "content": "The Hand Editor provides a specialized interface for detailed hand pose manipulation. It allows users to adjust individual finger segments, thumb positions, and hand rotations with precision controls. ",
    "url": "/miko-unity-docs/docs/Topics/hand_editor/#overview",
    
    "relUrl": "/docs/Topics/hand_editor/#overview"
  },"30": {
    "doc": "Hand Editor",
    "title": "Accessing Hand Editor",
    "content": "Opening the Interface . | Right-click on a hand joint in the scene | Select “Open Hand Editor” from context menu | Hand Editor window appears as floating interface | . Hand Editor Window . | Location: Prefab stored as HandEditorContents GameObject | State: Kept inactive until needed | Activation: Dynamically enabled when hand editing is required | . ",
    "url": "/miko-unity-docs/docs/Topics/hand_editor/#accessing-hand-editor",
    
    "relUrl": "/docs/Topics/hand_editor/#accessing-hand-editor"
  },"31": {
    "doc": "Hand Editor",
    "title": "Hand Anatomy Structure",
    "content": "Finger Organization . The hand editor organizes fingers into logical groups: . Thumb (Pollex) . | Metacarpal: Base thumb bone | Proximal Phalanx: Middle thumb segment | Distal Phalanx: Thumb tip | . Index Finger . | Metacarpal: Palm connection | Proximal Phalanx: Base finger segment | Middle Phalanx: Middle finger segment | Distal Phalanx: Fingertip | . Middle, Ring, and Pinky Fingers . Similar four-bone structure as index finger . ",
    "url": "/miko-unity-docs/docs/Topics/hand_editor/#hand-anatomy-structure",
    
    "relUrl": "/docs/Topics/hand_editor/#hand-anatomy-structure"
  },"32": {
    "doc": "Hand Editor",
    "title": "Hand Posing Controls",
    "content": "Individual Finger Control . Each finger segment can be controlled independently: . // Example finger rotation control fingerJoint.localRotation = Quaternion.Euler(flexion, abduction, rotation); . Muscle Group System . The HandMuscleGroups script organizes related movements: . | Grip Strength: Overall hand closure | Finger Spread: Finger separation control | Thumb Opposition: Thumb-to-finger positioning | . Preset Hand Poses . Common hand positions available as presets: . | Open Hand: Fingers extended | Fist: Closed hand position | Point: Index finger extended | Peace Sign: Index and middle fingers up | OK Sign: Thumb and index circle | . ",
    "url": "/miko-unity-docs/docs/Topics/hand_editor/#hand-posing-controls",
    
    "relUrl": "/docs/Topics/hand_editor/#hand-posing-controls"
  },"33": {
    "doc": "Hand Editor",
    "title": "Hand Editor Interface",
    "content": "Control Panels . The hand editor interface includes: . Finger Tabs . | Individual tabs for each finger | Thumb gets dedicated controls | Quick-select buttons for common adjustments | . Rotation Controls . | X, Y, Z sliders for precise rotation control | Reset buttons for individual joints | Mirror controls to copy left hand to right hand | . Preset Buttons . | Quick-access buttons for common poses | Save Custom preset functionality | Load saved hand poses | . ",
    "url": "/miko-unity-docs/docs/Topics/hand_editor/#hand-editor-interface",
    
    "relUrl": "/docs/Topics/hand_editor/#hand-editor-interface"
  },"34": {
    "doc": "Hand Editor",
    "title": "Advanced Features",
    "content": "Hand Mirroring . Automatically mirror hand poses between left and right hands: . // Mirror left hand pose to right hand MirrorHandPose(leftHand, rightHand); . Anatomical Constraints . The system enforces realistic hand limitations: . | Joint rotation limits based on human anatomy | Collision detection between fingers | Natural finger curves following anatomical principles | . Real-time Preview . | Live updates as you adjust controls | Smooth interpolation between pose changes | Undo/Redo functionality for pose adjustments | . ",
    "url": "/miko-unity-docs/docs/Topics/hand_editor/#advanced-features",
    
    "relUrl": "/docs/Topics/hand_editor/#advanced-features"
  },"35": {
    "doc": "Hand Editor",
    "title": "Hand Posing Workflow",
    "content": "Basic Hand Editing . | Select hand in scene or pose character | Open Hand Editor interface | Choose finger to modify | Adjust rotation using sliders or direct manipulation | Preview changes in real-time | Apply or Cancel modifications | . Advanced Techniques . | Start with preset close to desired pose | Fine-tune individual fingers for precision | Use anatomical constraints for realism | Save custom poses for reuse | Mirror to opposite hand when appropriate | . ",
    "url": "/miko-unity-docs/docs/Topics/hand_editor/#hand-posing-workflow",
    
    "relUrl": "/docs/Topics/hand_editor/#hand-posing-workflow"
  },"36": {
    "doc": "Hand Editor",
    "title": "Integration with Main System",
    "content": "Joint System Connection . The Hand Editor integrates with the main joint system: . | Uses same joint hierarchy as body posing | Respects overall arm positioning | Maintains hand-to-wrist connection | . Animation System . Hand poses can be: . | Saved as animation keyframes | Exported to animation clips | Loaded from existing poses | . ",
    "url": "/miko-unity-docs/docs/Topics/hand_editor/#integration-with-main-system",
    
    "relUrl": "/docs/Topics/hand_editor/#integration-with-main-system"
  },"37": {
    "doc": "Hand Editor",
    "title": "Troubleshooting",
    "content": "Hand Editor Not Opening . | Check: HandEditorContents prefab exists in scene | Verify: Hand joints are properly tagged | Solution: Ensure hand selection system is active | . Unnatural Hand Poses . | Enable: Anatomical constraints in Hand Editor | Reset: Individual finger positions | Use: Preset poses as starting points | . Performance Issues . | Limit: Number of simultaneous hand edits | Disable: Real-time preview for complex poses | Optimize: Hand mesh complexity if needed | . For more information about joint systems, see Joint Structure and Inverse Kinematics. ",
    "url": "/miko-unity-docs/docs/Topics/hand_editor/#troubleshooting",
    
    "relUrl": "/docs/Topics/hand_editor/#troubleshooting"
  },"38": {
    "doc": "Classes",
    "title": "Classes Documentation",
    "content": "Detailed technical documentation for all C# scripts and classes in the Unity pose manipulation project. ",
    "url": "/miko-unity-docs/docs/classes/#classes-documentation",
    
    "relUrl": "/docs/classes/#classes-documentation"
  },"39": {
    "doc": "Classes",
    "title": "Table of Contents",
    "content": ". | Overview | Core System Classes . | Scene Management | Rendering System | Joint and Bone System | IK System | . | User Interface Classes . | Camera Controls | Manipulation Tools | Hand Editing | . | Visual Feedback Classes . | Indicators and Highlights | . | Customization Classes . | Character Modification | Constraint System | . | Class Documentation Structure . | API Reference | Code Examples | Integration Guides | . | Quick Reference . | Most Commonly Used Classes | Class Naming Conventions | . | Development Guidelines . | Adding New Classes | Modifying Existing Classes | . | Getting Help | . ",
    "url": "/miko-unity-docs/docs/classes/#table-of-contents",
    
    "relUrl": "/docs/classes/#table-of-contents"
  },"40": {
    "doc": "Classes",
    "title": "Overview",
    "content": "This section provides comprehensive documentation for all C# classes, scripts, and components used in the pose manipulation system. Each class is documented with its purpose, public methods, properties, and usage examples. ",
    "url": "/miko-unity-docs/docs/classes/#overview",
    
    "relUrl": "/docs/classes/#overview"
  },"41": {
    "doc": "Classes",
    "title": "Core System Classes",
    "content": "Scene Management . | Scene Initialization Classes - Scripts responsible for scene setup and initialization . | Scene controllers and managers | Asset loading and validation | System initialization sequences | . | . Rendering System . | Rendering Posekun Classes - Character rendering and visualization . | Camera management scripts | Render mode controllers | Visual effect managers | . | . Joint and Bone System . | Joint Structure Classes - Bone hierarchy and joint management . | Joint data structures | Bone mapping utilities | Hierarchy management scripts | . | . IK System . | Inverse Kinematics Classes - IK solving and constraint handling . | IK solvers and algorithms | Constraint management | Target positioning systems | . | . ",
    "url": "/miko-unity-docs/docs/classes/#core-system-classes",
    
    "relUrl": "/docs/classes/#core-system-classes"
  },"42": {
    "doc": "Classes",
    "title": "User Interface Classes",
    "content": "Camera Controls . | Camera Movement Classes - Camera control and navigation systems . | Camera controller scripts | Input handling for camera movement | View state management | . | . Manipulation Tools . | Rotation Gizmo Classes - 3D rotation manipulation interfaces . | Gizmo rendering and interaction | Rotation calculation utilities | Visual feedback systems | . | . Hand Editing . | Hand Editor Classes - Hand pose editing functionality . | Finger manipulation controllers | Hand pose data structures | UI integration scripts | . | . ",
    "url": "/miko-unity-docs/docs/classes/#user-interface-classes",
    
    "relUrl": "/docs/classes/#user-interface-classes"
  },"43": {
    "doc": "Classes",
    "title": "Visual Feedback Classes",
    "content": "Indicators and Highlights . | Blinking Joints Classes - Visual feedback and highlighting systems . | Joint indicator management | Animation and blinking effects | Selection state visualization | . | . ",
    "url": "/miko-unity-docs/docs/classes/#visual-feedback-classes",
    
    "relUrl": "/docs/classes/#visual-feedback-classes"
  },"44": {
    "doc": "Classes",
    "title": "Customization Classes",
    "content": "Character Modification . | Posekun Modifications Classes - Character customization systems . | Model swapping utilities | Material and texture management | Avatar configuration scripts | . | . Constraint System . | Joint Restriction Classes - Anatomical constraint enforcement . | Joint limit enforcement | Anatomical validation | Constraint visualization | . | . ",
    "url": "/miko-unity-docs/docs/classes/#customization-classes",
    
    "relUrl": "/docs/classes/#customization-classes"
  },"45": {
    "doc": "Classes",
    "title": "Class Documentation Structure",
    "content": "Each class documentation folder contains: . API Reference . | Class Overview: Purpose and functionality description | Public Methods: Detailed method documentation with parameters and return values | Properties: Public properties and their usage | Events: Available events and delegates | . Code Examples . | Basic Usage: Simple implementation examples | Advanced Scenarios: Complex use cases and integration patterns | Best Practices: Recommended usage patterns and optimization tips | . Integration Guides . | Dependencies: Required components and scripts | Setup Instructions: How to properly configure and use the class | Troubleshooting: Common issues and solutions | . ",
    "url": "/miko-unity-docs/docs/classes/#class-documentation-structure",
    
    "relUrl": "/docs/classes/#class-documentation-structure"
  },"46": {
    "doc": "Classes",
    "title": "Quick Reference",
    "content": "Most Commonly Used Classes . | Class Category | Primary Use Case | Key Scripts | . | Scene Management | Application initialization | RootBehaviour, SceneLoader | . | Camera Control | View manipulation | CameraController, ViewManager | . | Pose Manipulation | Joint editing | JointController, PoseApplicator | . | IK System | Natural movement | IKSolver, ConstraintManager | . | Visual Feedback | User interaction | IndicatorManager, GizmoRenderer | . Class Naming Conventions . | Controllers: Classes ending in Controller handle user input and system state | Managers: Classes ending in Manager coordinate multiple systems | Utilities: Classes ending in Util or Helper provide utility functions | Data: Classes ending in Data represent data structures and containers | . ",
    "url": "/miko-unity-docs/docs/classes/#quick-reference",
    
    "relUrl": "/docs/classes/#quick-reference"
  },"47": {
    "doc": "Classes",
    "title": "Development Guidelines",
    "content": "Adding New Classes . | Documentation: Create comprehensive documentation for any new class | Naming: Follow established naming conventions | Dependencies: Clearly document class dependencies and requirements | Examples: Provide usage examples and integration guides | . Modifying Existing Classes . | Backward Compatibility: Maintain API compatibility when possible | Documentation Updates: Update documentation to reflect changes | Testing: Verify changes don’t break existing functionality | Version Notes: Document breaking changes and migration paths | . ",
    "url": "/miko-unity-docs/docs/classes/#development-guidelines",
    
    "relUrl": "/docs/classes/#development-guidelines"
  },"48": {
    "doc": "Classes",
    "title": "Getting Help",
    "content": "If you need assistance with any specific class: . | Check the individual class documentation in the respective folders | Review the Topics Documentation for high-level concept explanations | Consult the Project Overview for system architecture | Contact the development team for advanced support | . For conceptual information about these systems, see the Topics Documentation. ",
    "url": "/miko-unity-docs/docs/classes/#getting-help",
    
    "relUrl": "/docs/classes/#getting-help"
  },"49": {
    "doc": "Classes",
    "title": "Classes",
    "content": " ",
    "url": "/miko-unity-docs/docs/classes/",
    
    "relUrl": "/docs/classes/"
  },"50": {
    "doc": "Topics",
    "title": "Topics",
    "content": "Here we cover majority of all topics related to Unity. If there is any questions, please refer here under the relevant topic section first. ",
    "url": "/miko-unity-docs/docs/Topics/",
    
    "relUrl": "/docs/Topics/"
  },"51": {
    "doc": "Topics",
    "title": "Core Systems",
    "content": ". | Scene Initialization - How the LoadAll scene is set up and initialized | Rendering Posekun - Understanding the pose visualization character rendering | Joint Structure - Bone hierarchy and joint organization | Inverse Kinematics - IK system for natural pose manipulation | Loading Poses - Pose data loading, management, and application | . ",
    "url": "/miko-unity-docs/docs/Topics/#core-systems",
    
    "relUrl": "/docs/Topics/#core-systems"
  },"52": {
    "doc": "Topics",
    "title": "Camera &amp; Controls",
    "content": ". | Camera Movement - Camera controls and navigation | Rotation Gizmo - 3D rotation manipulation tools | . ",
    "url": "/miko-unity-docs/docs/Topics/#camera--controls",
    
    "relUrl": "/docs/Topics/#camera--controls"
  },"53": {
    "doc": "Topics",
    "title": "Pose Manipulation",
    "content": ". | Hand Editor - Hand pose editing interface and controls | Joint Restriction - Anatomical joint limitations and constraints | Posekun Modifications - Customizing the pose character | . ",
    "url": "/miko-unity-docs/docs/Topics/#pose-manipulation",
    
    "relUrl": "/docs/Topics/#pose-manipulation"
  },"54": {
    "doc": "Topics",
    "title": "Visual Feedback",
    "content": ". | Blinking Indicators - Interactive pose point visualization | Layers and Tags - Unity layer system and object tagging | . ",
    "url": "/miko-unity-docs/docs/Topics/#visual-feedback",
    
    "relUrl": "/docs/Topics/#visual-feedback"
  },"55": {
    "doc": "Home",
    "title": "Have fun with Unity",
    "content": "This Unity Poser project allows users to pose a pose in 3D space and AI generate pictures based to the pose. Get started View source code . | Getting started . | Requirements | Installation | Setup Code Editor | . | Open Your First Scene | Explore further | . ",
    "url": "/miko-unity-docs/#have-fun-with-unity",
    
    "relUrl": "/#have-fun-with-unity"
  },"56": {
    "doc": "Home",
    "title": "Getting started",
    "content": "If you are already familiar with Unity and installed the project, skip to here: . Requirements . | Unity Editor + Unity 2022.3.45f1 | Visual Studio Code (or your preferred C# code editor) | . Installation . | Clone or download the project: git clone https://github.com/MikoWorld/miko-unity . This repo is private. Please request access from JiYao or other employees for access . | Add the project to Unity . a. In Unity Hub, click Add project . b. Select the folder: miko-unity/UnityProject . | Install required packages . a. Open the Unity Editor . b. Go to Window → Package Manager . c. Install any missing dependencies listed under “In Project” . | . Setup Code Editor . | Ensure you have Visual Studio Code or its equivalent . | Setting up Recommended Settings in VSCode . a. Create a JSON file at .vscode/settings.json . b. Copy and paste these settings to hide unnecessary files and enable formatting: . { \"files.exclude\": { \"**/*.meta\": true, \"**/*.asset\": true, \"**/*.prefab\": true, \"**/*.unity\": true, \"Library/\": true, \"Temp/\": true, \"obj/\": true, \"Build/\": true, \"ProjectSettings/\": true }, \"dotnet.defaultSolution\": \"UnityProject.sln\", \"C_Cpp.errorSquiggles\": \"disabled\", \"editor.formatOnSave\": true, \"[csharp]\": { \"editor.defaultFormatter\": \"ms-dotnettools.csharp\" } } . | Install the C# Extension in VSCode for better code editing support . | . ",
    "url": "/miko-unity-docs/#getting-started",
    
    "relUrl": "/#getting-started"
  },"57": {
    "doc": "Home",
    "title": "Open Your First Scene",
    "content": "Open and Test Run Scene . | Open the Unity Project inside Unity . | It should look something like this. Check the scene to make sure you have loaded the Main LoadAll Scene. You can change the scene by going into Assets/Scenes and double clicking on LoadAll . | Click the play button at the top once the scene is loaded. | Now the scene is loaded and you can move the body! . | . ",
    "url": "/miko-unity-docs/#open-your-first-scene",
    
    "relUrl": "/#open-your-first-scene"
  },"58": {
    "doc": "Home",
    "title": "Explore further",
    "content": "You may wanna look at these: . ",
    "url": "/miko-unity-docs/#explore-further",
    
    "relUrl": "/#explore-further"
  },"59": {
    "doc": "Home",
    "title": "Home",
    "content": " ",
    "url": "/miko-unity-docs/",
    
    "relUrl": "/"
  },"60": {
    "doc": "Inverse Kinematics",
    "title": "Inverse Kinematics (IK)",
    "content": "Understanding the IK system that automatically positions joints to achieve natural poses. ",
    "url": "/miko-unity-docs/docs/Topics/inverse_kinematics/#inverse-kinematics-ik",
    
    "relUrl": "/docs/Topics/inverse_kinematics/#inverse-kinematics-ik"
  },"61": {
    "doc": "Inverse Kinematics",
    "title": "Table of Contents",
    "content": ". | Overview | Disabling / Enabling IK | IK Setup (in AddFBXController) | Overall Flow | Related Classes | IK vs Forward Kinematics . | Forward Kinematics (FK) | Inverse Kinematics (IK) | . | IK Chains in the System . | Arm IK Chains | Leg IK Chains | Spine IK Chain | . | IK Implementation . | Two-Bone IK Solver | Multi-Bone IK Solver | . | IK Solving Methods . | FABRIK (Forward And Backward Reaching IK) | CCD (Cyclic Coordinate Descent) | . | IK Constraints and Hints . | Pole Vectors | Joint Constraints | Weight Systems | . | IK Tools and Interface . | IK Targets | IK Gizmos | IK Blending | . | Advanced IK Features . | Multi-Target IK | IK Retargeting | IK Animation | . | Performance Optimization . | Update Frequency | LOD (Level of Detail) | Constraint Caching | . | Troubleshooting . | IK Not Reaching Target | Unnatural IK Results | IK Performance Issues | IK Popping or Jittering | . | IK Best Practices . | Pose Creation Workflow | Target Placement | . | . ",
    "url": "/miko-unity-docs/docs/Topics/inverse_kinematics/#table-of-contents",
    
    "relUrl": "/docs/Topics/inverse_kinematics/#table-of-contents"
  },"62": {
    "doc": "Inverse Kinematics",
    "title": "Overview",
    "content": "IK is implemented for both arms and legs using Unity’s RigBuilder and Two Bone IK Constraint. Within the IK system, the target (item at the end of the limb) and hint objects (item that that elbow points towards) are required to ensure the system is fully working. However, the current IK setup simply sets the hint weights very low, so the hints don’t affect the IK much. “Currently, the settings used in the above sets the value of the Hint Weight to be low to ensure that when we use our rotation gizmo or make changes to posekun without the IK system, these changes are retained instead of being overridden. However, take note that the lower the hint weight, the lesser the arm or leg will bend towards the hint object, which may lead to less realistic limb movement.” - January 2025 Documentation YouTube video with the same IK setup: Inverse Kinematics Unity Tutorial in 3 minutes . ",
    "url": "/miko-unity-docs/docs/Topics/inverse_kinematics/#overview",
    
    "relUrl": "/docs/Topics/inverse_kinematics/#overview"
  },"63": {
    "doc": "Inverse Kinematics",
    "title": "Disabling / Enabling IK",
    "content": "RigBuilder must be enabled for IK to function. However, it prevents FK (directly rotating the joint). Thus, RigBuilder component is disabled, and only enabled when the user is holding down the mouse on a movable IK target (the hands and feet joints). ",
    "url": "/miko-unity-docs/docs/Topics/inverse_kinematics/#disabling--enabling-ik",
    
    "relUrl": "/docs/Topics/inverse_kinematics/#disabling--enabling-ik"
  },"64": {
    "doc": "Inverse Kinematics",
    "title": "IK Setup (in AddFBXController)",
    "content": "IK is setup at the start of the scene, by AddFBXController in the AddRig() and TwoBoneIKSetup() functions. Poser Documentation: AddFBXController . More information on scene startup: Topic: Scene Initialization . ",
    "url": "/miko-unity-docs/docs/Topics/inverse_kinematics/#ik-setup-in-addfbxcontroller",
    
    "relUrl": "/docs/Topics/inverse_kinematics/#ik-setup-in-addfbxcontroller"
  },"65": {
    "doc": "Inverse Kinematics",
    "title": "Overall Flow",
    "content": ". ",
    "url": "/miko-unity-docs/docs/Topics/inverse_kinematics/#overall-flow",
    
    "relUrl": "/docs/Topics/inverse_kinematics/#overall-flow"
  },"66": {
    "doc": "Inverse Kinematics",
    "title": "Related Classes",
    "content": "Poser Documentation: Drag Joint (IK) Poser Documentation: UpdateHintPositions &lt;!– Inverse Kinematics (IK) is a mathematical method that calculates joint positions to achieve a desired end-effector position. Instead of manually positioning each joint, IK allows you to move a hand or foot and automatically calculates the appropriate shoulder, elbow, hip, and knee positions. ",
    "url": "/miko-unity-docs/docs/Topics/inverse_kinematics/#related-classes",
    
    "relUrl": "/docs/Topics/inverse_kinematics/#related-classes"
  },"67": {
    "doc": "Inverse Kinematics",
    "title": "IK vs Forward Kinematics",
    "content": "Forward Kinematics (FK) . | Manual Control: Position each joint individually | Bottom-up: Start from root, work outward | Precise Control: Exact control over each joint angle | Time Intensive: Requires positioning multiple joints | . Inverse Kinematics (IK) . | Goal-Oriented: Set target position, system calculates path | Top-down: Start from end goal, work inward | Natural Results: Automatically creates realistic poses | Efficient: Quick pose creation with fewer inputs | . ",
    "url": "/miko-unity-docs/docs/Topics/inverse_kinematics/#ik-vs-forward-kinematics",
    
    "relUrl": "/docs/Topics/inverse_kinematics/#ik-vs-forward-kinematics"
  },"68": {
    "doc": "Inverse Kinematics",
    "title": "IK Chains in the System",
    "content": "Arm IK Chains . Left/Right Arm IK: . | End Effector: Hand position | Chain: Shoulder → Elbow → Wrist → Hand | Target: User-defined hand position | Pole Vector: Elbow direction hint | . Leg IK Chains . Left/Right Leg IK: . | End Effector: Foot position | Chain: Hip → Knee → Ankle → Foot | Target: User-defined foot position | Pole Vector: Knee direction hint | . Spine IK Chain . Spine IK (when enabled): . | End Effector: Head or chest position | Chain: Hip → Spine → Chest → Neck → Head | Target: User-defined head position | . ",
    "url": "/miko-unity-docs/docs/Topics/inverse_kinematics/#ik-chains-in-the-system",
    
    "relUrl": "/docs/Topics/inverse_kinematics/#ik-chains-in-the-system"
  },"69": {
    "doc": "Inverse Kinematics",
    "title": "IK Implementation",
    "content": "Two-Bone IK Solver . Used for arms and legs (most common): . public class TwoBoneIK { public Transform upperJoint; // Shoulder/Hip public Transform middleJoint; // Elbow/Knee public Transform endJoint; // Wrist/Ankle public Transform target; // Goal position public Transform poleVector; // Direction hint public void Solve() { // Calculate joint positions to reach target // while maintaining bone length constraints } } . Multi-Bone IK Solver . Used for spine and complex chains: . public class MultiBoneIK { public Transform[] jointChain; // All joints in chain public Transform target; // End goal public int iterations = 10; // Solving precision public void Solve() { // Iteratively adjust joints to reach target // using FABRIK or CCD algorithm } } . ",
    "url": "/miko-unity-docs/docs/Topics/inverse_kinematics/#ik-implementation",
    
    "relUrl": "/docs/Topics/inverse_kinematics/#ik-implementation"
  },"70": {
    "doc": "Inverse Kinematics",
    "title": "IK Solving Methods",
    "content": "FABRIK (Forward And Backward Reaching IK) . Advantages: . | Fast convergence | Stable results | Natural joint positioning | . Process: . | Forward Pass: Work from end to root | Backward Pass: Work from root to end | Iterate: Repeat until target reached | . CCD (Cyclic Coordinate Descent) . Advantages: . | Simple implementation | Works with any number of joints | Predictable results | . Process: . | Start from end joint | Rotate each joint toward target | Move up chain sequentially | Repeat until convergence | . ",
    "url": "/miko-unity-docs/docs/Topics/inverse_kinematics/#ik-solving-methods",
    
    "relUrl": "/docs/Topics/inverse_kinematics/#ik-solving-methods"
  },"71": {
    "doc": "Inverse Kinematics",
    "title": "IK Constraints and Hints",
    "content": "Pole Vectors . Guide the middle joint direction: . // Example: Elbow pole vector Vector3 elbowDirection = poleVector.position - shoulder.position; // IK solver uses this to determine elbow placement . Joint Constraints . Maintain anatomical realism: . | Rotation Limits: Prevent unnatural bending | Twist Limits: Control bone rotation | Plane Constraints: Keep joints on anatomical planes | . Weight Systems . Control IK influence: . public class IKWeight { [Range(0f, 1f)] public float positionWeight = 1f; // Target position influence [Range(0f, 1f)] public float rotationWeight = 1f; // Target rotation influence } . ",
    "url": "/miko-unity-docs/docs/Topics/inverse_kinematics/#ik-constraints-and-hints",
    
    "relUrl": "/docs/Topics/inverse_kinematics/#ik-constraints-and-hints"
  },"72": {
    "doc": "Inverse Kinematics",
    "title": "IK Tools and Interface",
    "content": "IK Targets . Visual targets for IK positioning: . | Hand Targets: Spherical gizmos for hand positioning | Foot Targets: Ground-aligned targets for foot placement | Look Targets: Eye/head direction targets | . IK Gizmos . Visual manipulation tools: . | Position Handles: Move IK targets in 3D space | Rotation Handles: Orient end effectors | Pole Vector Handles: Adjust joint direction hints | . IK Blending . Smooth transitions between IK and FK: . // Blend between IK and FK based on weight finalPosition = Vector3.Lerp(fkPosition, ikPosition, ikWeight); finalRotation = Quaternion.Lerp(fkRotation, ikRotation, ikWeight); . ",
    "url": "/miko-unity-docs/docs/Topics/inverse_kinematics/#ik-tools-and-interface",
    
    "relUrl": "/docs/Topics/inverse_kinematics/#ik-tools-and-interface"
  },"73": {
    "doc": "Inverse Kinematics",
    "title": "Advanced IK Features",
    "content": "Multi-Target IK . Handle multiple constraints simultaneously: . | Dual hand targets: Both hands reaching different positions | Ground constraints: Feet maintaining contact with surface | Look-at targets: Head following specific objects | . IK Retargeting . Apply poses between different characters: . // Scale IK targets based on character proportions Vector3 scaledTarget = originalTarget * (targetCharacterHeight / sourceCharacterHeight); . IK Animation . Record and play back IK-based animations: . | Keyframe IK targets instead of individual joints | Interpolate target positions between keyframes | Maintain IK solving during animation playback | . ",
    "url": "/miko-unity-docs/docs/Topics/inverse_kinematics/#advanced-ik-features",
    
    "relUrl": "/docs/Topics/inverse_kinematics/#advanced-ik-features"
  },"74": {
    "doc": "Inverse Kinematics",
    "title": "Performance Optimization",
    "content": "Update Frequency . Control when IK solving occurs: . | Every Frame: Smooth real-time updates | Fixed Update: Consistent physics-based updates | On Demand: Only when targets change | . LOD (Level of Detail) . Reduce IK complexity based on distance: . if (distanceToCamera &gt; lodDistance) { // Use simpler IK solving or disable entirely ikSolver.iterations = 2; // Reduce precision } . Constraint Caching . Pre-calculate constraint boundaries: . | Cache joint limits to avoid repeated calculations | Pre-compute common IK solutions | Batch multiple IK solvers when possible | . ",
    "url": "/miko-unity-docs/docs/Topics/inverse_kinematics/#performance-optimization",
    
    "relUrl": "/docs/Topics/inverse_kinematics/#performance-optimization"
  },"75": {
    "doc": "Inverse Kinematics",
    "title": "Troubleshooting",
    "content": "IK Not Reaching Target . | Check: Target is within reach of joint chain | Verify: Bone lengths are correctly set | Increase: IK solver iteration count | Debug: Visualize joint chain and constraints | . Unnatural IK Results . | Enable: Joint rotation constraints | Adjust: Pole vector positions | Tune: IK weights and blending | Check: Bone orientations match anatomical axes | . IK Performance Issues . | Reduce: Solver iteration count | Implement: LOD system for distant characters | Optimize: Update frequency based on movement | Cache: Repeated IK calculations | . IK Popping or Jittering . | Smooth: Target movement with interpolation | Add: Damping to IK solver | Check: Target positions aren’t jumping | Ensure: Consistent solver settings | . ",
    "url": "/miko-unity-docs/docs/Topics/inverse_kinematics/#troubleshooting",
    
    "relUrl": "/docs/Topics/inverse_kinematics/#troubleshooting"
  },"76": {
    "doc": "Inverse Kinematics",
    "title": "IK Best Practices",
    "content": "Pose Creation Workflow . | Start with IK for major positioning (hands, feet) | Use FK for fine-tuning individual joints | Blend IK/FK for natural transitions | Test constraints to ensure realism | . Target Placement . | Place targets slightly before final position | Use smooth curves for target movement | Maintain targets within anatomical reach | Consider character proportions when positioning | . For more information about joint constraints, see Joint Restriction. For joint hierarchy details, see Joint Structure. –&gt; . ",
    "url": "/miko-unity-docs/docs/Topics/inverse_kinematics/#ik-best-practices",
    
    "relUrl": "/docs/Topics/inverse_kinematics/#ik-best-practices"
  },"77": {
    "doc": "Inverse Kinematics",
    "title": "Inverse Kinematics",
    "content": " ",
    "url": "/miko-unity-docs/docs/Topics/inverse_kinematics/",
    
    "relUrl": "/docs/Topics/inverse_kinematics/"
  },"78": {
    "doc": "Joint Restriction",
    "title": "Joint Restriction",
    "content": "Anatomical constraints and limitations that ensure realistic human pose generation. ",
    "url": "/miko-unity-docs/docs/Topics/joint_restriction/",
    
    "relUrl": "/docs/Topics/joint_restriction/"
  },"79": {
    "doc": "Joint Restriction",
    "title": "Table of Contents",
    "content": ". | Overview | Types of Joint Constraints . | Rotation Limits . | Angular Limits | Axis Restrictions | . | Movement Constraints . | Position Boundaries | Distance Constraints | . | . | Anatomical Joint Limits . | Upper Body Constraints . | Shoulder Joint | Elbow Joint | Wrist Joint | Neck Joint | . | Lower Body Constraints . | Hip Joint | Knee Joint | Ankle Joint | . | . | Constraint Implementation . | Constraint Checking | Constraint Enforcement | Soft Constraints | . | Visual Constraint Feedback . | Constraint Visualization | Limit Warnings | . | Constraint Types . | Hard Constraints | Soft Constraints | Conditional Constraints | . | IK Integration . | IK Constraint Handling | Constraint Priority | . | Configuration and Customization . | Constraint Profiles . | Realistic Profile | Flexible Profile | Animation Profile | . | User Customization | . | Troubleshooting . | Overly Restrictive Constraints | Unrealistic Poses | IK Not Reaching Targets | Performance Issues | . | Best Practices . | Constraint Design | User Experience | . | . ",
    "url": "/miko-unity-docs/docs/Topics/joint_restriction/#table-of-contents",
    
    "relUrl": "/docs/Topics/joint_restriction/#table-of-contents"
  },"80": {
    "doc": "Joint Restriction",
    "title": "Overview",
    "content": "Joint restrictions enforce anatomically realistic limitations on joint movement, preventing impossible or unnatural poses. This system ensures that generated poses maintain human-like characteristics and follow biological constraints. ",
    "url": "/miko-unity-docs/docs/Topics/joint_restriction/#overview",
    
    "relUrl": "/docs/Topics/joint_restriction/#overview"
  },"81": {
    "doc": "Joint Restriction",
    "title": "Types of Joint Constraints",
    "content": "Rotation Limits . Constrain joint rotation within anatomical ranges: . Angular Limits . public class JointConstraint { public Vector3 minRotation; // Minimum rotation per axis public Vector3 maxRotation; // Maximum rotation per axis // Example: Elbow can only bend forward 0° to 150° // minRotation = (0, 0, 0) // maxRotation = (150, 0, 0) } . Axis Restrictions . Some joints only rotate on specific axes: . | Hinge Joints: Elbow, knee (single axis) | Ball Joints: Shoulder, hip (all axes with limits) | Pivot Joints: Neck rotation (primarily Y-axis) | . Movement Constraints . Limit joint translation and positioning: . Position Boundaries . public class PositionConstraint { public Vector3 minPosition; // Minimum allowed position public Vector3 maxPosition; // Maximum allowed position public bool enableConstraint = true; } . Distance Constraints . Maintain fixed distances between connected joints: . | Bone Length: Fixed distance between parent and child | Chain Length: Total reach of joint chains | Collision Avoidance: Minimum distance between body parts | . ",
    "url": "/miko-unity-docs/docs/Topics/joint_restriction/#types-of-joint-constraints",
    
    "relUrl": "/docs/Topics/joint_restriction/#types-of-joint-constraints"
  },"82": {
    "doc": "Joint Restriction",
    "title": "Anatomical Joint Limits",
    "content": "Upper Body Constraints . Shoulder Joint . | Flexion/Extension: -40° to 180° | Abduction: 0° to 180° | Rotation: -90° to 90° | . Elbow Joint . | Flexion: 0° to 150° | Extension: Locked at 0° | Rotation: -90° to 90° (forearm twist) | . Wrist Joint . | Flexion/Extension: -70° to 80° | Deviation: -20° to 30° | Rotation: Limited by forearm | . Neck Joint . | Flexion/Extension: -40° to 60° | Lateral Bend: -45° to 45° | Rotation: -70° to 70° | . Lower Body Constraints . Hip Joint . | Flexion: -15° to 120° | Extension: -15° to 30° | Abduction: 0° to 45° | Rotation: -45° to 45° | . Knee Joint . | Flexion: 0° to 130° | Extension: Locked at 0° | Rotation: Minimal (5°) | . Ankle Joint . | Dorsiflexion: -30° to 20° | Plantarflexion: -20° to 50° | Inversion/Eversion: -30° to 20° | . ",
    "url": "/miko-unity-docs/docs/Topics/joint_restriction/#anatomical-joint-limits",
    
    "relUrl": "/docs/Topics/joint_restriction/#anatomical-joint-limits"
  },"83": {
    "doc": "Joint Restriction",
    "title": "Constraint Implementation",
    "content": "Constraint Checking . Real-time validation of joint positions: . public bool ValidateJointRotation(Transform joint, Quaternion targetRotation) { Vector3 eulerAngles = targetRotation.eulerAngles; JointConstraint constraint = GetConstraint(joint); // Check each axis if (eulerAngles.x &lt; constraint.minRotation.x || eulerAngles.x &gt; constraint.maxRotation.x) return false; if (eulerAngles.y &lt; constraint.minRotation.y || eulerAngles.y &gt; constraint.maxRotation.y) return false; if (eulerAngles.z &lt; constraint.minRotation.z || eulerAngles.z &gt; constraint.maxRotation.z) return false; return true; } . Constraint Enforcement . Apply limits when violations occur: . public Quaternion ClampRotation(Transform joint, Quaternion targetRotation) { Vector3 eulerAngles = targetRotation.eulerAngles; JointConstraint constraint = GetConstraint(joint); // Clamp each axis to valid range eulerAngles.x = Mathf.Clamp(eulerAngles.x, constraint.minRotation.x, constraint.maxRotation.x); eulerAngles.y = Mathf.Clamp(eulerAngles.y, constraint.minRotation.y, constraint.maxRotation.y); eulerAngles.z = Mathf.Clamp(eulerAngles.z, constraint.minRotation.z, constraint.maxRotation.z); return Quaternion.Euler(eulerAngles); } . Soft Constraints . Gradual resistance instead of hard limits: . public float CalculateConstraintForce(float currentAngle, float limitAngle, float softZone) { float distanceToLimit = Mathf.Abs(currentAngle - limitAngle); if (distanceToLimit &lt; softZone) { // Apply increasing resistance as approaching limit return Mathf.Pow(1f - (distanceToLimit / softZone), 2f); } return 0f; // No resistance outside soft zone } . ",
    "url": "/miko-unity-docs/docs/Topics/joint_restriction/#constraint-implementation",
    
    "relUrl": "/docs/Topics/joint_restriction/#constraint-implementation"
  },"84": {
    "doc": "Joint Restriction",
    "title": "Visual Constraint Feedback",
    "content": "Constraint Visualization . Show joint limits in the scene: . | Arc Indicators: Visual representation of rotation ranges | Color Coding: Green for safe zone, yellow for warning, red for limit | Real-time Updates: Constraints update as joints move | . Limit Warnings . Alert users when approaching constraints: . public void CheckConstraintProximity(Transform joint) { float proximityThreshold = 10f; // 10 degrees from limit Vector3 currentRotation = joint.localEulerAngles; JointConstraint constraint = GetConstraint(joint); foreach (int axis in {0, 1, 2}) // X, Y, Z axes { float distanceToMin = currentRotation[axis] - constraint.minRotation[axis]; float distanceToMax = constraint.maxRotation[axis] - currentRotation[axis]; if (distanceToMin &lt; proximityThreshold || distanceToMax &lt; proximityThreshold) { ShowConstraintWarning(joint, axis); } } } . ",
    "url": "/miko-unity-docs/docs/Topics/joint_restriction/#visual-constraint-feedback",
    
    "relUrl": "/docs/Topics/joint_restriction/#visual-constraint-feedback"
  },"85": {
    "doc": "Joint Restriction",
    "title": "Constraint Types",
    "content": "Hard Constraints . Absolute limits that cannot be exceeded: . | Bone collisions: Prevent limbs from intersecting | Joint structure: Maintain parent-child relationships | Physical impossibilities: Block unrealistic poses | . Soft Constraints . Flexible guidelines with resistance: . | Comfort zones: Natural range of motion | Effort modeling: Increased difficulty for extreme poses | Style preferences: Encourage certain pose characteristics | . Conditional Constraints . Context-dependent limitations: . public class ConditionalConstraint { public JointConstraint baseConstraint; public List&lt;ConstraintModifier&gt; modifiers; // Example: Shoulder range changes based on arm position public JointConstraint GetEffectiveConstraint(Transform joint) { JointConstraint effective = baseConstraint; foreach (var modifier in modifiers) { if (modifier.condition.Evaluate(joint)) { effective = modifier.ApplyModification(effective); } } return effective; } } . ",
    "url": "/miko-unity-docs/docs/Topics/joint_restriction/#constraint-types",
    
    "relUrl": "/docs/Topics/joint_restriction/#constraint-types"
  },"86": {
    "doc": "Joint Restriction",
    "title": "IK Integration",
    "content": "IK Constraint Handling . Ensure IK solutions respect joint limits: . public Vector3 SolveIKWithConstraints(Vector3 targetPosition, Transform[] jointChain) { Vector3 solution = IKSolver.Solve(targetPosition, jointChain); // Validate and adjust solution for constraints for (int i = 0; i &lt; jointChain.Length; i++) { Quaternion constrainedRotation = ClampRotation(jointChain[i], IKSolver.GetJointRotation(i)); IKSolver.SetJointRotation(i, constrainedRotation); } return IKSolver.GetEndEffectorPosition(); } . Constraint Priority . Handle conflicting constraints: . | Safety constraints: Prevent physical impossibilities | Anatomical constraints: Maintain realistic ranges | Comfort constraints: Encourage natural poses | User preferences: Allow customization | . ",
    "url": "/miko-unity-docs/docs/Topics/joint_restriction/#ik-integration",
    
    "relUrl": "/docs/Topics/joint_restriction/#ik-integration"
  },"87": {
    "doc": "Joint Restriction",
    "title": "Configuration and Customization",
    "content": "Constraint Profiles . Different constraint sets for different needs: . Realistic Profile . | Strict anatomical limits | Natural pose enforcement | Collision prevention enabled | . Flexible Profile . | Relaxed constraints for artistic poses | Extended range of motion | Soft limits with warnings | . Animation Profile . | Optimized for smooth animation | Keyframe-friendly constraints | Interpolation-safe limits | . User Customization . Allow users to modify constraints: . public class ConstraintSettings { [Range(0f, 2f)] public float constraintMultiplier = 1f; // Scale all limits [Range(0f, 1f)] public float softConstraintStrength = 0.8f; // Soft limit resistance public bool enableConstraints = true; // Master toggle public bool showConstraintVisualization = true; // Visual feedback } . ",
    "url": "/miko-unity-docs/docs/Topics/joint_restriction/#configuration-and-customization",
    
    "relUrl": "/docs/Topics/joint_restriction/#configuration-and-customization"
  },"88": {
    "doc": "Joint Restriction",
    "title": "Troubleshooting",
    "content": "Overly Restrictive Constraints . | Symptom: Cannot achieve desired poses | Solution: Adjust constraint limits or use Flexible profile | Debug: Visualize constraint boundaries | . Unrealistic Poses . | Symptom: Character in impossible positions | Solution: Enable or strengthen anatomical constraints | Check: Constraint system is active and properly configured | . IK Not Reaching Targets . | Symptom: IK cannot reach desired positions | Cause: Constraints preventing full extension | Solution: Adjust target position or relax constraints | . Performance Issues . | Symptom: Slow pose updates | Cause: Complex constraint calculations | Solution: Optimize constraint checking frequency | . ",
    "url": "/miko-unity-docs/docs/Topics/joint_restriction/#troubleshooting",
    
    "relUrl": "/docs/Topics/joint_restriction/#troubleshooting"
  },"89": {
    "doc": "Joint Restriction",
    "title": "Best Practices",
    "content": "Constraint Design . | Start with anatomically accurate base constraints | Allow customization for different use cases | Provide visual feedback for constraint violations | Test constraints with diverse pose requirements | . User Experience . | Give clear feedback when constraints block actions | Provide alternatives when poses aren’t possible | Allow temporary constraint relaxation when needed | Make constraint settings easily accessible | . For more information about joint structure and IK integration, see Joint Structure and Inverse Kinematics. ",
    "url": "/miko-unity-docs/docs/Topics/joint_restriction/#best-practices",
    
    "relUrl": "/docs/Topics/joint_restriction/#best-practices"
  },"90": {
    "doc": "Joint Structure",
    "title": "Joint Structure",
    "content": "Understanding the hierarchical bone system and joint organization used for pose manipulation. ",
    "url": "/miko-unity-docs/docs/Topics/joint_structure/",
    
    "relUrl": "/docs/Topics/joint_structure/"
  },"91": {
    "doc": "Joint Structure",
    "title": "Table of Contents",
    "content": ". | Overview | Hierarchical Organization . | Root Structure | Joint Naming Convention | . | Major Joint Groups . | Spine Chain | Arm Chains (Left/Right) | Leg Chains (Left/Right) | . | Joint Properties . | Transform Components | Joint Constraints | Movement Types | . | Joint Management System . | JointManager Script | JointLoader Script | . | Joint Manipulation . | Direct Manipulation | Inverse Kinematics (IK) | Forward Kinematics (FK) | . | Joint Visualization . | Joint Indicators | Selection Feedback | . | Data Structure . | Joint Definition Format | Runtime Joint Data | . | Performance Optimization . | Joint Culling | Constraint Caching | . | Troubleshooting . | Broken Joint Hierarchy | Joint Constraint Violations | Missing Joint Visualizations | . | . ",
    "url": "/miko-unity-docs/docs/Topics/joint_structure/#table-of-contents",
    
    "relUrl": "/docs/Topics/joint_structure/#table-of-contents"
  },"92": {
    "doc": "Joint Structure",
    "title": "Overview",
    "content": "The joint structure forms the backbone of the pose manipulation system. It defines how bones are connected, how they move in relation to each other, and provides the foundation for realistic human pose creation. ",
    "url": "/miko-unity-docs/docs/Topics/joint_structure/#overview",
    
    "relUrl": "/docs/Topics/joint_structure/#overview"
  },"93": {
    "doc": "Joint Structure",
    "title": "Hierarchical Organization",
    "content": "Root Structure . The character’s joint hierarchy follows anatomical organization: . Root (Hip/Pelvis) ├── Spine │ ├── Chest │ │ ├── Neck │ │ │ └── Head │ │ ├── Left Shoulder │ │ │ └── Left Arm Chain │ │ └── Right Shoulder │ │ └── Right Arm Chain ├── Left Hip │ └── Left Leg Chain └── Right Hip └── Right Leg Chain . Joint Naming Convention . Joints follow a consistent naming pattern: . | Prefix: Body side (L/R for Left/Right, or none for center) | Body Part: Descriptive name (Shoulder, Elbow, Knee, etc.) | Suffix: Joint type or position when applicable | . ",
    "url": "/miko-unity-docs/docs/Topics/joint_structure/#hierarchical-organization",
    
    "relUrl": "/docs/Topics/joint_structure/#hierarchical-organization"
  },"94": {
    "doc": "Joint Structure",
    "title": "Major Joint Groups",
    "content": "Spine Chain . Purpose: Core body movement and posture . | Hip/Root: Foundation joint for entire character | Spine: Lower back flexibility | Chest: Upper torso rotation and bending | Neck: Head orientation support | Head: Final orientation point | . Arm Chains (Left/Right) . Purpose: Upper limb manipulation . | Shoulder: Arm attachment and lifting | Upper Arm: Major arm rotation | Elbow: Arm bending joint | Forearm: Wrist rotation support | Wrist: Hand attachment point | Hand: Finger base connection | . Leg Chains (Left/Right) . Purpose: Lower limb and locomotion . | Hip: Leg attachment and lifting | Upper Leg: Major leg rotation | Knee: Leg bending joint | Lower Leg: Ankle rotation support | Ankle: Foot attachment point | Foot: Ground connection and balance | . ",
    "url": "/miko-unity-docs/docs/Topics/joint_structure/#major-joint-groups",
    
    "relUrl": "/docs/Topics/joint_structure/#major-joint-groups"
  },"95": {
    "doc": "Joint Structure",
    "title": "Joint Properties",
    "content": "Transform Components . Each joint contains essential transform data: . public class Joint { public Vector3 position; // 3D world position public Quaternion rotation; // 3D rotation public Vector3 scale; // Joint scaling (usually uniform) public Transform parent; // Parent joint reference public List&lt;Transform&gt; children; // Child joints } . Joint Constraints . Joints have anatomical limitations: . | Rotation Limits: Maximum/minimum rotation angles | Axis Restrictions: Which axes can rotate | Dependency Rules: How child joints are affected by parents | . Movement Types . Different joints support different movement types: . | Joint Type | Rotation Axes | Example Joints | . | Ball Joint | X, Y, Z | Shoulder, Hip | . | Hinge Joint | Single Axis | Elbow, Knee | . | Pivot Joint | Single Rotation | Neck, Wrist | . | Fixed Joint | No Movement | Rigid connections | . ",
    "url": "/miko-unity-docs/docs/Topics/joint_structure/#joint-properties",
    
    "relUrl": "/docs/Topics/joint_structure/#joint-properties"
  },"96": {
    "doc": "Joint Structure",
    "title": "Joint Management System",
    "content": "JointManager Script . Central controller for joint operations: . // Key responsibilities: - Joint hierarchy maintenance - Constraint enforcement - Position/rotation updates - Parent-child relationship management . JointLoader Script . Handles joint data loading and initialization: . | Loads joint definitions from data files | Establishes parent-child relationships | Applies initial joint constraints | Sets up joint visualization | . ",
    "url": "/miko-unity-docs/docs/Topics/joint_structure/#joint-management-system",
    
    "relUrl": "/docs/Topics/joint_structure/#joint-management-system"
  },"97": {
    "doc": "Joint Structure",
    "title": "Joint Manipulation",
    "content": "Direct Manipulation . Joints can be directly manipulated through: . | Mouse dragging: Direct joint positioning | Transform gizmos: Precise rotation control | Keyboard shortcuts: Quick adjustments | Value input: Exact numerical positioning | . Inverse Kinematics (IK) . Automatic joint positioning through IK solving: . // Example: Position hand, automatically adjust arm joints IKSolver.SetTargetPosition(handJoint, targetPosition); IKSolver.Solve(); // Calculates elbow and shoulder positions . Forward Kinematics (FK) . Manual joint-by-joint positioning: . | Move parent joints to affect children | Build poses from core outward | Full control over each joint angle | . ",
    "url": "/miko-unity-docs/docs/Topics/joint_structure/#joint-manipulation",
    
    "relUrl": "/docs/Topics/joint_structure/#joint-manipulation"
  },"98": {
    "doc": "Joint Structure",
    "title": "Joint Visualization",
    "content": "Joint Indicators . Visual representation system: . | Indicator Prefab: Standard joint visualization marker | JointIndicators Prefab: Animated feedback for active joints | Color Coding: Different colors for different joint types | Size Scaling: Joint importance indicated by marker size | . Selection Feedback . When joints are selected: . | Highlight Effect: Selected joint stands out visually | Gizmo Display: Rotation/position gizmos appear | Information Panel: Joint properties shown in UI | . ",
    "url": "/miko-unity-docs/docs/Topics/joint_structure/#joint-visualization",
    
    "relUrl": "/docs/Topics/joint_structure/#joint-visualization"
  },"99": {
    "doc": "Joint Structure",
    "title": "Data Structure",
    "content": "Joint Definition Format . Joints are defined using structured data: . { \"name\": \"LeftShoulder\", \"parent\": \"Chest\", \"position\": [0.2, 1.4, 0.0], \"rotation\": [0, 0, 0], \"constraints\": { \"minRotation\": [-45, -180, -90], \"maxRotation\": [180, 45, 90] } } . Runtime Joint Data . During execution, joints maintain: . | Current transform state | Reference to original bind pose | Constraint information | Parent/child relationships | Visualization components | . ",
    "url": "/miko-unity-docs/docs/Topics/joint_structure/#data-structure",
    
    "relUrl": "/docs/Topics/joint_structure/#data-structure"
  },"100": {
    "doc": "Joint Structure",
    "title": "Performance Optimization",
    "content": "Joint Culling . Optimize performance by: . | LOD System: Reduce joint detail at distance | Frustum Culling: Hide joints outside camera view | Update Frequency: Reduce update rate for distant joints | . Constraint Caching . | Pre-calculate constraint boundaries | Cache frequently accessed joint relationships | Batch joint updates when possible | . ",
    "url": "/miko-unity-docs/docs/Topics/joint_structure/#performance-optimization",
    
    "relUrl": "/docs/Topics/joint_structure/#performance-optimization"
  },"101": {
    "doc": "Joint Structure",
    "title": "Troubleshooting",
    "content": "Broken Joint Hierarchy . | Symptom: Child joints not following parents | Solution: Verify parent-child relationships in JointManager | Prevention: Don’t manually modify joint parents at runtime | . Joint Constraint Violations . | Symptom: Unnatural joint positions | Solution: Enable constraint enforcement in JointManager | Debug: Check joint rotation limits are properly set | . Missing Joint Visualizations . | Symptom: Joints not visible in scene | Solution: Verify Indicator prefabs are assigned | Check: Joint visualization layer is visible in camera | . For information about joint constraints and limitations, see Joint Restriction. For IK implementation details, see Inverse Kinematics. ",
    "url": "/miko-unity-docs/docs/Topics/joint_structure/#troubleshooting",
    
    "relUrl": "/docs/Topics/joint_structure/#troubleshooting"
  },"102": {
    "doc": "Layers and Tags",
    "title": "Layers and Tags",
    "content": "Unity’s layer and tag system organization for efficient rendering and object management. ",
    "url": "/miko-unity-docs/docs/Topics/layers_and_tags/",
    
    "relUrl": "/docs/Topics/layers_and_tags/"
  },"103": {
    "doc": "Layers and Tags",
    "title": "Table of Contents",
    "content": ". | Overview | Layer Organization . | Default Unity Layers | Custom Project Layers . | Character Layers | UI and Interface Layers | Camera and Rendering Layers | . | . | Layer Usage Patterns . | Rendering Optimization | Collision Detection | Raycast Filtering | . | Tag System . | Standard Unity Tags | Custom Project Tags . | Character Tags | Interaction Tags | UI Tags | System Tags | . | . | Tag Usage Examples . | Object Identification | Component Filtering | System Organization | . | Layer Masks and Culling . | Camera Culling Masks . | Main Camera Configuration | Screenshot Camera Configuration | . | Physics Layer Matrix | . | Performance Optimization . | Culling Strategies | Batch Rendering | . | Layer and Tag Best Practices . | Organization Guidelines | Performance Considerations | Maintenance Tips | . | Troubleshooting . | Objects Not Rendering | Raycast Not Hitting Objects | Performance Issues | UI Interaction Problems | . | Configuration Files . | Layer Setup Script | Tag Definitions | . | . ",
    "url": "/miko-unity-docs/docs/Topics/layers_and_tags/#table-of-contents",
    
    "relUrl": "/docs/Topics/layers_and_tags/#table-of-contents"
  },"104": {
    "doc": "Layers and Tags",
    "title": "Overview",
    "content": "The Layers and Tags system provides organizational structure for GameObjects, enabling efficient rendering, collision detection, and object categorization. This system is crucial for performance optimization and logical grouping of scene elements. ",
    "url": "/miko-unity-docs/docs/Topics/layers_and_tags/#overview",
    
    "relUrl": "/docs/Topics/layers_and_tags/#overview"
  },"105": {
    "doc": "Layers and Tags",
    "title": "Layer Organization",
    "content": "Default Unity Layers . Standard Unity layers used in the project: . | Layer 0: Default - General objects | Layer 1: TransparentFX - Transparent effects | Layer 2: Ignore Raycast - Non-interactive objects | Layer 3: Water - Water-related objects | Layer 4: UI - User interface elements | . Custom Project Layers . Specialized layers for pose manipulation: . Character Layers . | Layer 8: Character - Main pose character model | Layer 9: CharacterJoints - Joint visualization points | Layer 10: CharacterBones - Bone structure visualization | Layer 11: CharacterEffects - Character-related effects | . UI and Interface Layers . | Layer 12: UIOverlay - Floating UI elements | Layer 13: Gizmos - Rotation and manipulation gizmos | Layer 14: Indicators - Joint selection indicators | Layer 15: Debug - Debug visualization elements | . Camera and Rendering Layers . | Layer 16: MainRender - Objects rendered by main camera | Layer 17: PosekunRender - Objects rendered by Posekun camera | Layer 18: ScreenshotOnly - Objects only visible in screenshots | Layer 19: Background - Background elements | . ",
    "url": "/miko-unity-docs/docs/Topics/layers_and_tags/#layer-organization",
    
    "relUrl": "/docs/Topics/layers_and_tags/#layer-organization"
  },"106": {
    "doc": "Layers and Tags",
    "title": "Layer Usage Patterns",
    "content": "Rendering Optimization . Use layers to control what each camera renders: . // Main camera only renders character and UI Camera mainCamera = Camera.main; mainCamera.cullingMask = (1 &lt;&lt; LayerMask.NameToLayer(\"Character\")) | (1 &lt;&lt; LayerMask.NameToLayer(\"UI\")) | (1 &lt;&lt; LayerMask.NameToLayer(\"Gizmos\")); // Posekun camera only renders pose reference Camera posekunCamera = GameObject.Find(\"PosekunCamera\").GetComponent&lt;Camera&gt;(); posekunCamera.cullingMask = (1 &lt;&lt; LayerMask.NameToLayer(\"Character\")); . Collision Detection . Configure physics interactions between layers: . // Character joints don't collide with UI elements Physics.IgnoreLayerCollision( LayerMask.NameToLayer(\"CharacterJoints\"), LayerMask.NameToLayer(\"UI\") ); . Raycast Filtering . Filter raycast interactions by layer: . // Only raycast against interactive elements LayerMask interactiveMask = (1 &lt;&lt; LayerMask.NameToLayer(\"CharacterJoints\")) | (1 &lt;&lt; LayerMask.NameToLayer(\"Gizmos\")); RaycastHit hit; if (Physics.Raycast(ray, out hit, Mathf.Infinity, interactiveMask)) { // Handle joint or gizmo interaction } . ",
    "url": "/miko-unity-docs/docs/Topics/layers_and_tags/#layer-usage-patterns",
    
    "relUrl": "/docs/Topics/layers_and_tags/#layer-usage-patterns"
  },"107": {
    "doc": "Layers and Tags",
    "title": "Tag System",
    "content": "Standard Unity Tags . Built-in tags used in the project: . | “Untagged”: Default objects without specific categorization | “MainCamera”: Primary scene camera | “Player”: Player-controlled objects | “Finish”: Goal or completion markers | . Custom Project Tags . Specialized tags for pose system components: . Character Tags . | “Character”: Main pose character GameObject | “CharacterRoot”: Root bone of character hierarchy | “Joint”: Individual joint GameObjects | “EndEffector”: IK target points (hands, feet) | . Interaction Tags . | “Selectable”: Objects that can be selected by user | “Draggable”: Objects that can be dragged/manipulated | “Rotatable”: Objects that support rotation | “IKTarget”: Inverse kinematics target objects | . UI Tags . | “UIElement”: User interface components | “DebugUI”: Debug panel elements | “FloatingWindow”: Draggable UI windows | “Tooltip”: Hover information displays | . System Tags . | “Manager”: System manager GameObjects | “Controller”: Control script containers | “Prefab”: Template objects for instantiation | . ",
    "url": "/miko-unity-docs/docs/Topics/layers_and_tags/#tag-system",
    
    "relUrl": "/docs/Topics/layers_and_tags/#tag-system"
  },"108": {
    "doc": "Layers and Tags",
    "title": "Tag Usage Examples",
    "content": "Object Identification . // Find all joints in the scene GameObject[] joints = GameObject.FindGameObjectsWithTag(\"Joint\"); // Get the main character GameObject character = GameObject.FindWithTag(\"Character\"); // Find all IK targets GameObject[] ikTargets = GameObject.FindGameObjectsWithTag(\"IKTarget\"); . Component Filtering . // Only process selectable objects for mouse interaction void OnMouseDown() { if (gameObject.CompareTag(\"Selectable\")) { SelectObject(gameObject); } } . System Organization . // Initialize all manager objects GameObject[] managers = GameObject.FindGameObjectsWithTag(\"Manager\"); foreach (GameObject manager in managers) { manager.GetComponent&lt;IManager&gt;().Initialize(); } . ",
    "url": "/miko-unity-docs/docs/Topics/layers_and_tags/#tag-usage-examples",
    
    "relUrl": "/docs/Topics/layers_and_tags/#tag-usage-examples"
  },"109": {
    "doc": "Layers and Tags",
    "title": "Layer Masks and Culling",
    "content": "Camera Culling Masks . Configure what each camera renders: . Main Camera Configuration . public class CameraSetup : MonoBehaviour { void Start() { Camera cam = GetComponent&lt;Camera&gt;(); // Include character, UI, and gizmos cam.cullingMask = LayerMask.GetMask(\"Character\", \"UI\", \"Gizmos\", \"Indicators\"); // Exclude debug elements cam.cullingMask &amp;= ~LayerMask.GetMask(\"Debug\"); } } . Screenshot Camera Configuration . public class ScreenshotController : MonoBehaviour { public void TakeScreenshot() { Camera screenshotCam = GetComponent&lt;Camera&gt;(); // Only include character and background for clean screenshots screenshotCam.cullingMask = LayerMask.GetMask(\"Character\", \"Background\"); // Exclude UI and debug elements screenshotCam.cullingMask &amp;= ~LayerMask.GetMask(\"UI\", \"Gizmos\", \"Debug\"); } } . Physics Layer Matrix . Configure collision interactions: . public class LayerSetup : MonoBehaviour { void Start() { // Character doesn't collide with UI Physics.IgnoreLayerCollision( LayerMask.NameToLayer(\"Character\"), LayerMask.NameToLayer(\"UI\") ); // Gizmos don't collide with anything except raycasts Physics.IgnoreLayerCollision( LayerMask.NameToLayer(\"Gizmos\"), LayerMask.NameToLayer(\"Character\") ); } } . ",
    "url": "/miko-unity-docs/docs/Topics/layers_and_tags/#layer-masks-and-culling",
    
    "relUrl": "/docs/Topics/layers_and_tags/#layer-masks-and-culling"
  },"110": {
    "doc": "Layers and Tags",
    "title": "Performance Optimization",
    "content": "Culling Strategies . Optimize rendering performance: . // Distance-based layer switching public class LODLayerManager : MonoBehaviour { public float detailDistance = 10f; void Update() { float distance = Vector3.Distance(transform.position, Camera.main.transform.position); if (distance &gt; detailDistance) { // Switch to simplified layer gameObject.layer = LayerMask.NameToLayer(\"CharacterLOD\"); } else { // Use detailed layer gameObject.layer = LayerMask.NameToLayer(\"Character\"); } } } . Batch Rendering . Group objects by layer for efficient rendering: . // Batch process objects on same layer public class BatchRenderer : MonoBehaviour { public void RenderLayer(string layerName) { LayerMask layer = LayerMask.NameToLayer(layerName); // Get all objects on this layer GameObject[] objects = FindObjectsOnLayer(layer); // Batch render for efficiency Graphics.DrawMeshInstanced(mesh, submeshIndex, material, matrices); } } . ",
    "url": "/miko-unity-docs/docs/Topics/layers_and_tags/#performance-optimization",
    
    "relUrl": "/docs/Topics/layers_and_tags/#performance-optimization"
  },"111": {
    "doc": "Layers and Tags",
    "title": "Layer and Tag Best Practices",
    "content": "Organization Guidelines . | Use consistent naming conventions for layers and tags | Group related objects on same layers | Limit layer count to avoid performance issues | Document layer purposes for team understanding | . Performance Considerations . | Minimize layer switches during runtime | Use culling masks effectively for different cameras | Batch objects on same layers when possible | Avoid unnecessary raycast layer checks | . Maintenance Tips . | Review layer usage regularly for optimization opportunities | Clean up unused layers and tags | Test rendering performance with different layer configurations | Keep layer assignments consistent across prefabs | . ",
    "url": "/miko-unity-docs/docs/Topics/layers_and_tags/#layer-and-tag-best-practices",
    
    "relUrl": "/docs/Topics/layers_and_tags/#layer-and-tag-best-practices"
  },"112": {
    "doc": "Layers and Tags",
    "title": "Troubleshooting",
    "content": "Objects Not Rendering . | Check: Object layer is included in camera culling mask | Verify: Layer exists and is properly named | Debug: Use Frame Debugger to inspect rendering calls | . Raycast Not Hitting Objects . | Check: Target layer is included in raycast LayerMask | Verify: Objects have appropriate colliders | Debug: Visualize raycasts with Debug.DrawRay() | . Performance Issues . | Profile: Which layers are causing rendering bottlenecks | Optimize: Camera culling masks to reduce overdraw | Batch: Objects on same layers when possible | . UI Interaction Problems . | Check: UI elements are on correct layer | Verify: EventSystem is configured for UI layers | Ensure: UI layers have higher rendering priority | . ",
    "url": "/miko-unity-docs/docs/Topics/layers_and_tags/#troubleshooting",
    
    "relUrl": "/docs/Topics/layers_and_tags/#troubleshooting"
  },"113": {
    "doc": "Layers and Tags",
    "title": "Configuration Files",
    "content": "Layer Setup Script . public static class ProjectLayers { public const int Character = 8; public const int CharacterJoints = 9; public const int CharacterBones = 10; public const int CharacterEffects = 11; public const int UIOverlay = 12; public const int Gizmos = 13; public const int Indicators = 14; public const int Debug = 15; public static LayerMask GetCharacterMask() { return (1 &lt;&lt; Character) | (1 &lt;&lt; CharacterJoints) | (1 &lt;&lt; CharacterBones); } public static LayerMask GetUIMask() { return (1 &lt;&lt; UIOverlay) | (1 &lt;&lt; LayerMask.NameToLayer(\"UI\")); } } . Tag Definitions . public static class ProjectTags { public const string Character = \"Character\"; public const string Joint = \"Joint\"; public const string IKTarget = \"IKTarget\"; public const string Selectable = \"Selectable\"; public const string Manager = \"Manager\"; public static bool IsInteractive(GameObject obj) { return obj.CompareTag(Selectable) || obj.CompareTag(Joint); } } . For more information about camera systems and rendering, see Camera Movement and Rendering Posekun. ",
    "url": "/miko-unity-docs/docs/Topics/layers_and_tags/#configuration-files",
    
    "relUrl": "/docs/Topics/layers_and_tags/#configuration-files"
  },"114": {
    "doc": "Loading Poses",
    "title": "Loading Poses",
    "content": "Learn how to load, manage, and apply pose data from various sources including CSV files, animation clips, and external pose libraries. ",
    "url": "/miko-unity-docs/docs/Topics/loading_poses/",
    
    "relUrl": "/docs/Topics/loading_poses/"
  },"115": {
    "doc": "Loading Poses",
    "title": "Table of Contents",
    "content": ". | Overview | Supported Pose Formats . | CSV Pose Data . | CSV Structure | . | Animation Clips | External Pose Libraries | . | Pose Loading Pipeline . | Initialization Process | CSV Loading Implementation | Animation Clip Loading | . | Pose Library Management . | Library Structure | Runtime Pose Loading | . | Pose Application System . | Basic Pose Application | Smooth Pose Transitions | . | Performance Optimization . | Pose Caching | Lazy Loading | . | Error Handling and Validation . | Pose Data Validation | Loading Error Recovery | . | Integration with UI System . | Pose Selection Interface | . | Common Loading Issues . | File Not Found Errors | Format Compatibility Issues | Memory Usage Problems | . | . ",
    "url": "/miko-unity-docs/docs/Topics/loading_poses/#table-of-contents",
    
    "relUrl": "/docs/Topics/loading_poses/#table-of-contents"
  },"116": {
    "doc": "Loading Poses",
    "title": "Overview",
    "content": "The pose loading system supports multiple data formats and sources, allowing for flexible pose management and application. This system handles everything from simple CSV pose data to complex animation sequences. ",
    "url": "/miko-unity-docs/docs/Topics/loading_poses/#overview",
    
    "relUrl": "/docs/Topics/loading_poses/#overview"
  },"117": {
    "doc": "Loading Poses",
    "title": "Supported Pose Formats",
    "content": "CSV Pose Data . | Location: Assets/CSV/ directory | Format: Comma-separated values with joint rotation data | Use Case: Static pose references and pose libraries | . CSV Structure . JointName,RotationX,RotationY,RotationZ,RotationW Hips,0.0,0.0,0.0,1.0 Spine,0.1,0.0,0.0,0.995 LeftShoulder,0.0,0.5,0.0,0.866 ... Animation Clips . | Location: Assets/Animations/ and Resources/PoseLibrary/ | Format: Unity Animation Clips (.anim) | Use Case: Dynamic pose sequences and transitions | . External Pose Libraries . | Sources: Online pose databases, motion capture data | Integration: Runtime loading and caching system | Formats: JSON, XML, custom binary formats | . ",
    "url": "/miko-unity-docs/docs/Topics/loading_poses/#supported-pose-formats",
    
    "relUrl": "/docs/Topics/loading_poses/#supported-pose-formats"
  },"118": {
    "doc": "Loading Poses",
    "title": "Pose Loading Pipeline",
    "content": "Initialization Process . public class PoseLoader : MonoBehaviour { [Header(\"Pose Sources\")] public TextAsset[] csvPoseFiles; public AnimationClip[] animationPoses; private Dictionary&lt;string, PoseData&gt; loadedPoses; void Start() { LoadAllPoses(); } void LoadAllPoses() { loadedPoses = new Dictionary&lt;string, PoseData&gt;(); // Load CSV poses foreach (var csvFile in csvPoseFiles) { LoadCSVPose(csvFile); } // Load animation poses foreach (var clip in animationPoses) { LoadAnimationPose(clip); } } } . CSV Loading Implementation . public PoseData LoadCSVPose(TextAsset csvFile) { PoseData poseData = new PoseData(); string[] lines = csvFile.text.Split('\\n'); // Skip header row for (int i = 1; i &lt; lines.Length; i++) { string[] values = lines[i].Split(','); if (values.Length &gt;= 5) { string jointName = values[0]; Quaternion rotation = new Quaternion( float.Parse(values[1]), // X float.Parse(values[2]), // Y float.Parse(values[3]), // Z float.Parse(values[4]) // W ); poseData.AddJointRotation(jointName, rotation); } } return poseData; } . Animation Clip Loading . public PoseData LoadAnimationPose(AnimationClip clip, float sampleTime = 0f) { PoseData poseData = new PoseData(); // Sample animation at specified time clip.SampleAnimation(targetGameObject, sampleTime); // Extract joint rotations from animated object Transform[] joints = targetGameObject.GetComponentsInChildren&lt;Transform&gt;(); foreach (Transform joint in joints) { poseData.AddJointRotation(joint.name, joint.localRotation); } return poseData; } . ",
    "url": "/miko-unity-docs/docs/Topics/loading_poses/#pose-loading-pipeline",
    
    "relUrl": "/docs/Topics/loading_poses/#pose-loading-pipeline"
  },"119": {
    "doc": "Loading Poses",
    "title": "Pose Library Management",
    "content": "Library Structure . [System.Serializable] public class PoseLibrary { [Header(\"Library Information\")] public string libraryName; public string version; public string description; [Header(\"Pose Collections\")] public PoseCollection[] categories; public PoseData GetPose(string category, string poseName) { var collection = Array.Find(categories, c =&gt; c.name == category); return collection?.GetPose(poseName); } } [System.Serializable] public class PoseCollection { public string name; public PoseData[] poses; public PoseData GetPose(string poseName) { return Array.Find(poses, p =&gt; p.name == poseName); } } . Runtime Pose Loading . public class RuntimePoseLoader : MonoBehaviour { private const string POSE_LIBRARY_PATH = \"PoseLibrary/\"; public async Task&lt;PoseData&gt; LoadPoseAsync(string poseName) { // Try loading from Resources first var resourcePose = await LoadFromResources(poseName); if (resourcePose != null) return resourcePose; // Try loading from StreamingAssets var streamingPose = await LoadFromStreamingAssets(poseName); if (streamingPose != null) return streamingPose; // Try loading from external source return await LoadFromExternalSource(poseName); } private async Task&lt;PoseData&gt; LoadFromResources(string poseName) { string path = POSE_LIBRARY_PATH + poseName; var clip = Resources.Load&lt;AnimationClip&gt;(path); if (clip != null) { return LoadAnimationPose(clip); } return null; } } . ",
    "url": "/miko-unity-docs/docs/Topics/loading_poses/#pose-library-management",
    
    "relUrl": "/docs/Topics/loading_poses/#pose-library-management"
  },"120": {
    "doc": "Loading Poses",
    "title": "Pose Application System",
    "content": "Basic Pose Application . public void ApplyPose(PoseData poseData, Animator animator) { if (poseData == null || animator == null) return; foreach (var jointData in poseData.joints) { HumanBodyBones boneId = GetHumanBodyBone(jointData.name); Transform bone = animator.GetBoneTransform(boneId); if (bone != null) { bone.localRotation = jointData.rotation; } } } . Smooth Pose Transitions . public IEnumerator TransitionToPose(PoseData targetPose, float duration = 1f) { PoseData startPose = GetCurrentPose(); float elapsed = 0f; while (elapsed &lt; duration) { float t = elapsed / duration; t = Mathf.SmoothStep(0f, 1f, t); // Smooth interpolation PoseData interpolatedPose = LerpPoses(startPose, targetPose, t); ApplyPose(interpolatedPose, targetAnimator); elapsed += Time.deltaTime; yield return null; } ApplyPose(targetPose, targetAnimator); // Ensure final pose is exact } . ",
    "url": "/miko-unity-docs/docs/Topics/loading_poses/#pose-application-system",
    
    "relUrl": "/docs/Topics/loading_poses/#pose-application-system"
  },"121": {
    "doc": "Loading Poses",
    "title": "Performance Optimization",
    "content": "Pose Caching . public class PoseCache { private Dictionary&lt;string, PoseData&gt; cache = new Dictionary&lt;string, PoseData&gt;(); private Queue&lt;string&gt; accessOrder = new Queue&lt;string&gt;(); private const int MAX_CACHE_SIZE = 100; public PoseData GetPose(string poseName) { if (cache.ContainsKey(poseName)) { // Move to end of access queue UpdateAccessOrder(poseName); return cache[poseName]; } return null; } public void CachePose(string poseName, PoseData poseData) { if (cache.Count &gt;= MAX_CACHE_SIZE) { EvictOldestPose(); } cache[poseName] = poseData; accessOrder.Enqueue(poseName); } } . Lazy Loading . public class LazyPoseLoader { private Dictionary&lt;string, Func&lt;PoseData&gt;&gt; poseLoaders; public void RegisterPoseLoader(string poseName, Func&lt;PoseData&gt; loader) { poseLoaders[poseName] = loader; } public PoseData LoadPose(string poseName) { if (poseLoaders.ContainsKey(poseName)) { return poseLoaders[poseName](); } return null; } } . ",
    "url": "/miko-unity-docs/docs/Topics/loading_poses/#performance-optimization",
    
    "relUrl": "/docs/Topics/loading_poses/#performance-optimization"
  },"122": {
    "doc": "Loading Poses",
    "title": "Error Handling and Validation",
    "content": "Pose Data Validation . public bool ValidatePoseData(PoseData poseData) { if (poseData == null || poseData.joints == null) { Debug.LogError(\"Pose data is null or missing joint data\"); return false; } // Check for required joints string[] requiredJoints = { \"Hips\", \"Spine\", \"LeftShoulder\", \"RightShoulder\" }; foreach (string requiredJoint in requiredJoints) { if (!poseData.HasJoint(requiredJoint)) { Debug.LogWarning($\"Missing required joint: {requiredJoint}\"); } } // Validate rotation values foreach (var joint in poseData.joints) { if (!IsValidQuaternion(joint.rotation)) { Debug.LogError($\"Invalid rotation for joint: {joint.name}\"); return false; } } return true; } . Loading Error Recovery . public PoseData LoadPoseWithFallback(string poseName, PoseData fallbackPose = null) { try { var pose = LoadPose(poseName); if (ValidatePoseData(pose)) { return pose; } } catch (System.Exception e) { Debug.LogError($\"Failed to load pose '{poseName}': {e.Message}\"); } // Return fallback pose or default T-pose return fallbackPose ?? CreateDefaultTPose(); } . ",
    "url": "/miko-unity-docs/docs/Topics/loading_poses/#error-handling-and-validation",
    
    "relUrl": "/docs/Topics/loading_poses/#error-handling-and-validation"
  },"123": {
    "doc": "Loading Poses",
    "title": "Integration with UI System",
    "content": "Pose Selection Interface . public class PoseSelectionUI : MonoBehaviour { [Header(\"UI References\")] public Dropdown poseDropdown; public Button loadButton; public Image previewImage; private PoseLibrary currentLibrary; void Start() { PopulatePoseDropdown(); loadButton.onClick.AddListener(LoadSelectedPose); } void PopulatePoseDropdown() { poseDropdown.ClearOptions(); List&lt;string&gt; poseNames = new List&lt;string&gt;(); foreach (var category in currentLibrary.categories) { foreach (var pose in category.poses) { poseNames.Add($\"{category.name}/{pose.name}\"); } } poseDropdown.AddOptions(poseNames); } } . ",
    "url": "/miko-unity-docs/docs/Topics/loading_poses/#integration-with-ui-system",
    
    "relUrl": "/docs/Topics/loading_poses/#integration-with-ui-system"
  },"124": {
    "doc": "Loading Poses",
    "title": "Common Loading Issues",
    "content": "File Not Found Errors . | Symptom: Poses fail to load with file not found errors | Solution: Verify file paths and ensure assets are in correct directories | Prevention: Use Resources.Load or Addressable Asset System for reliable asset loading | . Format Compatibility Issues . | Symptom: Loaded poses don’t apply correctly | Solution: Verify pose data format matches expected joint naming conventions | Code Check: Ensure joint names map correctly to humanoid bone structure | . Memory Usage Problems . | Symptom: High memory usage when loading many poses | Solution: Implement pose caching and lazy loading strategies | Optimization: Unload unused poses and use compression for pose data | . For more information about pose application and manipulation, see Joint Structure and Inverse Kinematics. ",
    "url": "/miko-unity-docs/docs/Topics/loading_poses/#common-loading-issues",
    
    "relUrl": "/docs/Topics/loading_poses/#common-loading-issues"
  },"125": {
    "doc": "Project Overview",
    "title": "Project Overview",
    "content": "This documentation provides a comprehensive overview of the Unity project structure and the key GameObjects in the main LoadAll scene. ",
    "url": "/miko-unity-docs/docs/overview/",
    
    "relUrl": "/docs/overview/"
  },"126": {
    "doc": "Project Overview",
    "title": "Table of Contents",
    "content": ". | Project Structure | LoadAll Scene Overview . | Scene Hierarchy | Core GameObjects . | Root | Directional Light | EventSystem | . | Camera System . | CameraParent | mainCamera | PosekunCamera | . | User Interface . | Canvas | SideMenu | PC | . | Interactive Elements . | HandEditorContents | Indicator | JointIndicators | . | . | Development Notes . | Important Prefab Dependencies | Debug Elements | . | Next Steps | . ",
    "url": "/miko-unity-docs/docs/overview/#table-of-contents",
    
    "relUrl": "/docs/overview/#table-of-contents"
  },"127": {
    "doc": "Project Overview",
    "title": "Project Structure",
    "content": "The Unity project follows a well-organized folder structure designed for pose manipulation and 3D character interaction: . UnityProject/ │ ├── Assets/ │ ├── Animations/ # Character pose animations │ │ └── PoseManiacs/ # Pre-built pose animations from PoseManiacs │ │ │ ├── CSV/ # 2D pose data for front-end integration │ │ ├── Old/ # Legacy CSV files (deprecated) │ │ └── Posemaniacs/ # PoseManiacs 2D coordinate data │ │ │ ├── Editor/ # Custom Unity Editor scripts and tools │ │ │ ├── Materials/ # Rendering materials │ │ └── HandEditorSprites/ # UI sprite materials for hand editor │ │ │ ├── Models/ # 3D character models (.fbx, .obj, etc.) │ │ │ ├── Plugins/ # Platform-specific plugins │ │ ├── iOS/ # iOS build dependencies │ │ └── WebGL/ # WebGL build dependencies │ │ │ ├── Prefabs/ # Reusable GameObject templates │ │ └── UI Prefabs/ # User interface prefabs (windows, buttons) │ │ │ ├── Resources/ # Runtime-loaded assets (PoseLibrary with AnimationClips) │ ├── Scenes/ # Unity scene files │ └── Scripts/ # C# scripts for game logic │ ├── Builds/ # Compiled application outputs │ ├── iOS/ # iOS build artifacts │ └── WebGL/ # WebGL build artifacts . ",
    "url": "/miko-unity-docs/docs/overview/#project-structure",
    
    "relUrl": "/docs/overview/#project-structure"
  },"128": {
    "doc": "Project Overview",
    "title": "LoadAll Scene Overview",
    "content": "The LoadAll scene contains the core GameObjects that power the pose manipulation system. Each GameObject serves a specific purpose in the application’s functionality. Scene Hierarchy . You can explore each GameObject using Unity’s Inspector panel (shown on the right) to view their components and configuration. Core GameObjects . Root . Purpose: Central controller that manages scene-wide functionality and coordinates between different systems. Key Components: . | Enable Camera Script - Controls camera activation states | Root Behaviour Script - Main application logic controller | Root WebGL Script - WebGL-specific functionality | AdjustModel Script - Model transformation and scaling | Draw Posekun Script - Renders the pose visualization character | Screenshot Controller Script - Handles screenshot capture functionality | Add FBX Controller Script - Manages FBX model import and integration | Bodykun Controller Script - Controls the main character body manipulation | . Directional Light . Purpose: Provides global directional lighting to simulate sunlight and ensure proper scene illumination. Key Components: . | Light (Type: Directional) - Main lighting source for the scene | . EventSystem . Purpose: Unity’s input management system that handles all UI interactions, mouse events, and touch input. Key Components: . | EventSystem - Core input event detection and processing | StandaloneInputModule - Handles keyboard, mouse, and controller input for desktop platforms | . Camera System . CameraParent . Purpose: Parent container for camera hierarchy, enabling grouped camera movements and transformations. Key Components: . | Camera Controller Script - Manages camera movement, rotation, and zoom | Pose Bounding Box Script - Calculates and displays pose boundaries | . mainCamera . Purpose: Primary scene camera responsible for rendering the main view and supporting transform gizmo interactions. Key Components: . | Camera - Unity’s camera component for scene rendering | Transform Gizmo Script - Enables 3D manipulation gizmos for object transformation | . PosekunCamera . Purpose: Specialized camera dedicated to rendering the pose reference character (Posekun). Key Components: . | Camera - Secondary camera for pose character rendering | . User Interface . Canvas . Purpose: Root container for all UI elements, providing the foundation for the user interface system. SideMenu . Purpose: Debug panel that displays available poses in a scrollable menu format. Note: Primarily used for development and debugging purposes. Contains script to autopopulate PoseLibrary . PC . Purpose: Desktop-style UI panel containing various control buttons and options. Note: Primarily used for development and debugging purposes. Interactive Elements . HandEditorContents . Purpose: Prefab container for the hand pose editing interface. Important: Keep this GameObject inactive until needed for hand editing functionality. Indicator . Purpose: Template prefab for pose point visualization markers. Critical: This prefab is referenced by multiple systems - do not remove or relocate. JointIndicators . Purpose: Template prefab for animated joint indicators that highlight active pose points. Critical: This prefab is essential for pose point feedback - maintain its position in the hierarchy. ",
    "url": "/miko-unity-docs/docs/overview/#loadall-scene-overview",
    
    "relUrl": "/docs/overview/#loadall-scene-overview"
  },"129": {
    "doc": "Project Overview",
    "title": "Development Notes",
    "content": "Important Prefab Dependencies . | Indicator and JointIndicators prefabs are critical to the pose system | These prefabs must remain in their current hierarchy positions | Multiple scripts reference these prefabs at runtime | . Debug Elements . | SideMenu and PC GameObjects are development tools | These can be disabled in production builds | Keep them for testing and debugging pose functionality | . ",
    "url": "/miko-unity-docs/docs/overview/#development-notes",
    
    "relUrl": "/docs/overview/#development-notes"
  },"130": {
    "doc": "Project Overview",
    "title": "Next Steps",
    "content": "To learn more about the project: . | Explore the Classes documentation for detailed script information | View Topics for specific feature implementations | Return to Getting Started for setup instructions | . ",
    "url": "/miko-unity-docs/docs/overview/#next-steps",
    
    "relUrl": "/docs/overview/#next-steps"
  },"131": {
    "doc": "Posekun Modifications",
    "title": "Posekun Modifications",
    "content": "Learn how to customize the pose reference character (Posekun) including model swapping, material changes, and visual enhancements. ",
    "url": "/miko-unity-docs/docs/Topics/posekun_modifications/",
    
    "relUrl": "/docs/Topics/posekun_modifications/"
  },"132": {
    "doc": "Posekun Modifications",
    "title": "Table of Contents",
    "content": ". | Overview | Character Model Customization . | Model Requirements | Model Integration Process . | 1. Import New Model | 2. Avatar Configuration | 3. Script Integration | . | Supported Model Types | . | Material and Texture Customization . | Material Setup | Visual Styles . | Wireframe Mode | Solid Color Mode | Textured Mode | . | . | Animation and Pose Integration . | Pose Application System | Pose Validation | . | Visual Enhancement Options . | Lighting Integration | Post-Processing Effects | . | Performance Considerations . | LOD (Level of Detail) System | Optimization Guidelines | . | Common Customization Issues . | Avatar Mapping Problems | Scale Mismatches | Material Rendering Issues | . | Integration Workflow . | Step-by-Step Process | Testing Checklist | . | . ",
    "url": "/miko-unity-docs/docs/Topics/posekun_modifications/#table-of-contents",
    
    "relUrl": "/docs/Topics/posekun_modifications/#table-of-contents"
  },"133": {
    "doc": "Posekun Modifications",
    "title": "Overview",
    "content": "Posekun is the reference character used for pose visualization. This system is designed to be modular, allowing for different character models, materials, and visual styles to be easily integrated. ",
    "url": "/miko-unity-docs/docs/Topics/posekun_modifications/#overview",
    
    "relUrl": "/docs/Topics/posekun_modifications/#overview"
  },"134": {
    "doc": "Posekun Modifications",
    "title": "Character Model Customization",
    "content": "Model Requirements . | Format: FBX or similar 3D model format supported by Unity | Rigging: Humanoid rig compatible with Unity’s Avatar system | Bone Structure: Standard humanoid bone hierarchy (recommended) | Topology: Clean mesh topology for proper deformation | . Model Integration Process . 1. Import New Model . // Place model in Assets/Models/ directory // Configure import settings: // - Animation Type: Humanoid // - Avatar Definition: Create From This Model // - Optimize Game Objects: Checked (optional) . 2. Avatar Configuration . // In model import settings: // - Configure T-Pose // - Map bones to Unity's standard humanoid rig // - Verify muscle definitions are correct . 3. Script Integration . // Update references in pose manipulation scripts public GameObject posekunPrefab; // Assign new model prefab public Avatar posekunAvatar; // Assign new avatar . Supported Model Types . | Stylized Characters: Cartoon or anime-style models | Realistic Humans: Photorealistic character models | Simplified Mannequins: Basic pose reference models | Custom Rigs: Non-standard but humanoid-compatible rigs | . ",
    "url": "/miko-unity-docs/docs/Topics/posekun_modifications/#character-model-customization",
    
    "relUrl": "/docs/Topics/posekun_modifications/#character-model-customization"
  },"135": {
    "doc": "Posekun Modifications",
    "title": "Material and Texture Customization",
    "content": "Material Setup . // Standard material configuration for Posekun Material posekunMaterial = new Material(Shader.Find(\"Standard\")); posekunMaterial.albedo = characterTexture; posekunMaterial.metallic = 0.0f; posekunMaterial.smoothness = 0.5f; . Visual Styles . Wireframe Mode . | Purpose: Technical pose reference | Implementation: Custom wireframe shader | Use Case: Detailed joint analysis | . Solid Color Mode . | Purpose: Clean visual reference | Implementation: Flat color material | Use Case: Focus on pose silhouette | . Textured Mode . | Purpose: Realistic character reference | Implementation: Standard PBR materials | Use Case: Final pose visualization | . ",
    "url": "/miko-unity-docs/docs/Topics/posekun_modifications/#material-and-texture-customization",
    
    "relUrl": "/docs/Topics/posekun_modifications/#material-and-texture-customization"
  },"136": {
    "doc": "Posekun Modifications",
    "title": "Animation and Pose Integration",
    "content": "Pose Application System . // Apply pose to custom Posekun model public void ApplyPoseToCustomModel(PoseData poseData, Animator animator) { // Validate avatar compatibility if (!IsAvatarCompatible(animator.avatar)) { Debug.LogWarning(\"Avatar may not be fully compatible\"); } // Apply joint rotations foreach (var joint in poseData.joints) { Transform bone = animator.GetBoneTransform(joint.humanBodyBone); if (bone != null) { bone.localRotation = joint.rotation; } } } . Pose Validation . | Joint Range Checking: Ensure new model’s joint limits are appropriate | Proportions: Verify pose scaling works correctly | IK Compatibility: Test inverse kinematics functionality | . ",
    "url": "/miko-unity-docs/docs/Topics/posekun_modifications/#animation-and-pose-integration",
    
    "relUrl": "/docs/Topics/posekun_modifications/#animation-and-pose-integration"
  },"137": {
    "doc": "Posekun Modifications",
    "title": "Visual Enhancement Options",
    "content": "Lighting Integration . // Configure lighting for custom Posekun public void SetupPosekunLighting() { // Add rim lighting for better silhouette Light rimLight = CreateRimLight(); rimLight.intensity = 0.5f; rimLight.color = Color.white; // Key light for form definition Light keyLight = CreateKeyLight(); keyLight.intensity = 1.0f; keyLight.shadows = LightShadows.Soft; } . Post-Processing Effects . | Outline Effects: Character silhouette enhancement | Depth of Field: Focus attention on specific body parts | Color Grading: Consistent visual style across different models | . ",
    "url": "/miko-unity-docs/docs/Topics/posekun_modifications/#visual-enhancement-options",
    
    "relUrl": "/docs/Topics/posekun_modifications/#visual-enhancement-options"
  },"138": {
    "doc": "Posekun Modifications",
    "title": "Performance Considerations",
    "content": "LOD (Level of Detail) System . // Configure LOD for custom Posekun models LODGroup lodGroup = posekunObject.AddComponent&lt;LODGroup&gt;(); LOD[] lods = new LOD[3]; // High detail (close view) lods[0] = new LOD(0.5f, highDetailRenderers); // Medium detail (medium distance) lods[1] = new LOD(0.2f, mediumDetailRenderers); // Low detail (far view) lods[2] = new LOD(0.05f, lowDetailRenderers); lodGroup.SetLODs(lods); . Optimization Guidelines . | Polygon Count: Keep model complexity appropriate for real-time use | Texture Resolution: Balance quality with memory usage | Animation Compression: Use appropriate compression for pose data | . ",
    "url": "/miko-unity-docs/docs/Topics/posekun_modifications/#performance-considerations",
    
    "relUrl": "/docs/Topics/posekun_modifications/#performance-considerations"
  },"139": {
    "doc": "Posekun Modifications",
    "title": "Common Customization Issues",
    "content": "Avatar Mapping Problems . | Symptom: Poses don’t apply correctly to custom model | Solution: Verify avatar bone mapping in model import settings | Prevention: Use models with standard humanoid proportions | . Scale Mismatches . | Symptom: Character appears too large or small | Solution: Adjust model scale in import settings or via Transform | Code Example: // Adjust Posekun scale programmatically posekunObject.transform.localScale = Vector3.one * scaleFactor; . | . Material Rendering Issues . | Symptom: Materials don’t display correctly | Solution: Verify shader compatibility and render pipeline settings | Check: Ensure materials use compatible shaders for your render pipeline | . ",
    "url": "/miko-unity-docs/docs/Topics/posekun_modifications/#common-customization-issues",
    
    "relUrl": "/docs/Topics/posekun_modifications/#common-customization-issues"
  },"140": {
    "doc": "Posekun Modifications",
    "title": "Integration Workflow",
    "content": "Step-by-Step Process . | Import Model: Add new character model to project | Configure Avatar: Set up humanoid rig mapping | Create Materials: Design appropriate visual style | Test Integration: Verify pose application works correctly | Optimize Performance: Implement LOD and optimization | Update Scripts: Modify references in pose manipulation code | . Testing Checklist . | Model imports without errors | Avatar is properly configured | Basic poses apply correctly | Hand poses work (if applicable) | IK system functions properly | Performance is acceptable | Visual quality meets requirements | . For more information about the pose system, see Joint Structure and Inverse Kinematics. ",
    "url": "/miko-unity-docs/docs/Topics/posekun_modifications/#integration-workflow",
    
    "relUrl": "/docs/Topics/posekun_modifications/#integration-workflow"
  },"141": {
    "doc": "Rendering Posekun",
    "title": "Rendering Posekun",
    "content": "Understanding how the pose visualization character (Posekun) is rendered and displayed in the scene. ",
    "url": "/miko-unity-docs/docs/Topics/rendering_posekun/",
    
    "relUrl": "/docs/Topics/rendering_posekun/"
  },"142": {
    "doc": "Rendering Posekun",
    "title": "Table of Contents",
    "content": ". | Overview | Related Classes | . ",
    "url": "/miko-unity-docs/docs/Topics/rendering_posekun/#table-of-contents",
    
    "relUrl": "/docs/Topics/rendering_posekun/#table-of-contents"
  },"143": {
    "doc": "Rendering Posekun",
    "title": "Overview",
    "content": "Posekun is a visualization of the joints of Bodykun. It is similar to standard skeletons used by OpenPose and ControlNet. These are the visuals that are fed to the image generation model to control the pose. The Posekun visual joints are parented to a separate gameObject in the scene “Posekun”. Each of them has a Mesh Filter + Mesh Renderer, DrawLimb script and Line Renderer. Using the Line Renderer, a line is drawn from each joint to its parent. Drawing Posekun is mainly handled by calls to the DrawPosekun class. ",
    "url": "/miko-unity-docs/docs/Topics/rendering_posekun/#overview",
    
    "relUrl": "/docs/Topics/rendering_posekun/#overview"
  },"144": {
    "doc": "Rendering Posekun",
    "title": "Related Classes",
    "content": "Poser Documentation: DrawPosekun Poser Documentation: Colors Poser Documentation: DrawLimb . ",
    "url": "/miko-unity-docs/docs/Topics/rendering_posekun/#related-classes",
    
    "relUrl": "/docs/Topics/rendering_posekun/#related-classes"
  },"145": {
    "doc": "Rotation Gizmo",
    "title": "Rotation Gizmo",
    "content": "Interactive 3D rotation tools for precise joint manipulation and pose adjustment. ",
    "url": "/miko-unity-docs/docs/Topics/rotation_gizmo/",
    
    "relUrl": "/docs/Topics/rotation_gizmo/"
  },"146": {
    "doc": "Rotation Gizmo",
    "title": "Table of Contents",
    "content": ". | Overview | Gizmo Components . | Transform Gizmo Script | Gizmo Elements | . | Gizmo Interaction . | Mouse Controls | Visual Feedback | Coordinate Systems . | Local Space | World Space | Screen Space | . | . | Gizmo Behavior . | Automatic Sizing | Context Sensitivity | . | Advanced Gizmo Features . | Rotation Constraints | Snap Rotation | Multi-Joint Rotation | . | Gizmo Customization . | Visual Settings | Sensitivity Settings | . | Integration with Joint System . | Joint Selection | Constraint Integration | Undo/Redo Support | . | Performance Optimization . | LOD System | Update Frequency | Culling | . | Troubleshooting . | Gizmo Not Appearing | Incorrect Rotation Behavior | Performance Issues | Gizmo Scale Issues | . | Best Practices . | Efficient Posing Workflow | Gizmo Usage Tips | . | . ",
    "url": "/miko-unity-docs/docs/Topics/rotation_gizmo/#table-of-contents",
    
    "relUrl": "/docs/Topics/rotation_gizmo/#table-of-contents"
  },"147": {
    "doc": "Rotation Gizmo",
    "title": "Overview",
    "content": "The Rotation Gizmo system provides intuitive 3D manipulation tools that allow users to rotate joints by dragging visual handles in 3D space. This system makes pose creation more intuitive by providing direct visual feedback and control. ",
    "url": "/miko-unity-docs/docs/Topics/rotation_gizmo/#overview",
    
    "relUrl": "/docs/Topics/rotation_gizmo/#overview"
  },"148": {
    "doc": "Rotation Gizmo",
    "title": "Gizmo Components",
    "content": "Transform Gizmo Script . Location: Attached to mainCamera GameObject Purpose: Manages the visual rotation handles and interaction system . Gizmo Elements . The rotation gizmo consists of several visual components: . | X-Axis Ring: Red circular handle for X-axis rotation | Y-Axis Ring: Green circular handle for Y-axis rotation | Z-Axis Ring: Blue circular handle for Z-axis rotation | Screen Space Ring: Yellow handle for screen-relative rotation | Center Sphere: Multi-axis rotation handle | . ",
    "url": "/miko-unity-docs/docs/Topics/rotation_gizmo/#gizmo-components",
    
    "relUrl": "/docs/Topics/rotation_gizmo/#gizmo-components"
  },"149": {
    "doc": "Rotation Gizmo",
    "title": "Gizmo Interaction",
    "content": "Mouse Controls . | Left Click + Drag: Rotate around selected axis | Hover: Highlight the axis ring being targeted | Release: Commit rotation change | Right Click: Cancel current rotation operation | . Visual Feedback . | Color Highlighting: Hovered axis becomes brighter | Rotation Preview: Real-time rotation as you drag | Snap Indicators: Visual guides for common angles (15°, 30°, 45°, 90°) | . Coordinate Systems . The gizmo can operate in different coordinate spaces: . Local Space . | Gizmo aligns with joint’s local orientation | Rotations follow joint’s natural axes | Best for: Anatomical rotations (bend elbow, rotate wrist) | . World Space . | Gizmo aligns with world X, Y, Z axes | Rotations are global regardless of joint orientation | Best for: Absolute positioning and alignment | . Screen Space . | Gizmo aligns with camera view | Rotations are relative to screen orientation | Best for: Quick adjustments from current view angle | . ",
    "url": "/miko-unity-docs/docs/Topics/rotation_gizmo/#gizmo-interaction",
    
    "relUrl": "/docs/Topics/rotation_gizmo/#gizmo-interaction"
  },"150": {
    "doc": "Rotation Gizmo",
    "title": "Gizmo Behavior",
    "content": "Automatic Sizing . The gizmo automatically adjusts its size based on: . | Distance to Camera: Maintains consistent screen size | Joint Importance: Larger gizmos for major joints | Selection State: Selected joints get larger gizmos | . Context Sensitivity . Gizmo appearance changes based on: . | Joint Type: Different styles for different joint types | Constraint Status: Visual indicators for rotation limits | Lock State: Grayed out axes that are locked or constrained | . ",
    "url": "/miko-unity-docs/docs/Topics/rotation_gizmo/#gizmo-behavior",
    
    "relUrl": "/docs/Topics/rotation_gizmo/#gizmo-behavior"
  },"151": {
    "doc": "Rotation Gizmo",
    "title": "Advanced Gizmo Features",
    "content": "Rotation Constraints . The gizmo respects joint limitations: . // Example: Elbow can only bend on one axis if (joint.constrainedAxes.Contains(Axis.X)) { gizmo.DisableXRotation(); } . Snap Rotation . Hold Shift while dragging to enable angle snapping: . | 15° increments: Fine control snapping | 45° increments: Quick positioning snapping | 90° increments: Right-angle snapping | Custom angles: User-defined snap values | . Multi-Joint Rotation . Select multiple joints to rotate them simultaneously: . | Proportional: Each joint rotates by same amount | Relative: Rotations applied relative to each joint’s current state | Constrained: Respects individual joint constraints | . ",
    "url": "/miko-unity-docs/docs/Topics/rotation_gizmo/#advanced-gizmo-features",
    
    "relUrl": "/docs/Topics/rotation_gizmo/#advanced-gizmo-features"
  },"152": {
    "doc": "Rotation Gizmo",
    "title": "Gizmo Customization",
    "content": "Visual Settings . Customize gizmo appearance: . | Setting | Description | Default | . | Ring Thickness | Width of rotation rings | 0.05 | . | Ring Radius | Size of rotation handles | 1.0 | . | Color Scheme | Colors for X/Y/Z axes | Red/Green/Blue | . | Transparency | Handle opacity | 0.8 | . | Highlight Intensity | Brightness when hovered | 1.5x | . Sensitivity Settings . Adjust rotation responsiveness: . | Setting | Description | Default | . | Rotation Speed | Mouse movement to rotation ratio | 1.0 | . | Snap Tolerance | Distance for snap activation | 5° | . | Damping | Smoothing for rotation updates | 0.1 | . ",
    "url": "/miko-unity-docs/docs/Topics/rotation_gizmo/#gizmo-customization",
    
    "relUrl": "/docs/Topics/rotation_gizmo/#gizmo-customization"
  },"153": {
    "doc": "Rotation Gizmo",
    "title": "Integration with Joint System",
    "content": "Joint Selection . The gizmo appears when joints are selected: . // When joint is selected if (selectedJoint != null) { gizmo.SetTarget(selectedJoint); gizmo.SetVisible(true); } . Constraint Integration . Gizmo respects joint constraints automatically: . | Rotation limits prevent over-rotation | Locked axes are disabled in gizmo | Constraint feedback shows valid rotation ranges | . Undo/Redo Support . All gizmo rotations support undo system: . | Command Pattern: Each rotation is a reversible command | State Tracking: Before/after joint states stored | Batch Operations: Multiple joint rotations grouped | . ",
    "url": "/miko-unity-docs/docs/Topics/rotation_gizmo/#integration-with-joint-system",
    
    "relUrl": "/docs/Topics/rotation_gizmo/#integration-with-joint-system"
  },"154": {
    "doc": "Rotation Gizmo",
    "title": "Performance Optimization",
    "content": "LOD System . Gizmo detail adjusts based on distance: . | Close: Full detail with all rings and handles | Medium: Simplified rings, fewer segments | Far: Basic handles only | Very Far: Gizmo hidden entirely | . Update Frequency . Optimize gizmo updates: . // Only update when joint is selected and moving if (joint.IsSelected &amp;&amp; Input.GetMouseButton(0)) { gizmo.UpdateRotation(); } . Culling . Hide gizmos outside camera view: . | Frustum culling: Don’t render off-screen gizmos | Occlusion culling: Hide gizmos behind geometry | Selection priority: Always show selected joint gizmos | . ",
    "url": "/miko-unity-docs/docs/Topics/rotation_gizmo/#performance-optimization",
    
    "relUrl": "/docs/Topics/rotation_gizmo/#performance-optimization"
  },"155": {
    "doc": "Rotation Gizmo",
    "title": "Troubleshooting",
    "content": "Gizmo Not Appearing . | Check: Joint is properly selected | Verify: Transform Gizmo Script is enabled on camera | Ensure: Gizmo layer is visible in camera settings | . Incorrect Rotation Behavior . | Verify: Coordinate space setting (Local vs World vs Screen) | Check: Joint constraints are properly configured | Debug: Mouse input is being received correctly | . Performance Issues . | Reduce: Gizmo LOD distances for better performance | Limit: Number of simultaneous gizmos | Optimize: Gizmo mesh complexity | . Gizmo Scale Issues . | Adjust: Auto-sizing settings in Transform Gizmo Script | Check: Camera distance calculations | Verify: Screen space conversion is working correctly | . ",
    "url": "/miko-unity-docs/docs/Topics/rotation_gizmo/#troubleshooting",
    
    "relUrl": "/docs/Topics/rotation_gizmo/#troubleshooting"
  },"156": {
    "doc": "Rotation Gizmo",
    "title": "Best Practices",
    "content": "Efficient Posing Workflow . | Select joint you want to rotate | Choose appropriate coordinate space (Local/World/Screen) | Use snap rotation for precise angles | Rotate major joints first, then fine-tune | Check constraints to ensure realistic poses | . Gizmo Usage Tips . | Use Local space for anatomical rotations | Use World space for absolute positioning | Use Screen space for quick view-relative adjustments | Hold Shift for angle snapping | Use multiple selection for symmetrical poses | . For more information about joint constraints, see Joint Restriction. For camera controls, see Camera Movement. ",
    "url": "/miko-unity-docs/docs/Topics/rotation_gizmo/#best-practices",
    
    "relUrl": "/docs/Topics/rotation_gizmo/#best-practices"
  },"157": {
    "doc": "Scene Initialization",
    "title": "Scene Initialization",
    "content": "Learn how the LoadAll scene is set up, initialized, and prepared for pose manipulation functionality. ",
    "url": "/miko-unity-docs/docs/Topics/scene_initalisation/",
    
    "relUrl": "/docs/Topics/scene_initalisation/"
  },"158": {
    "doc": "Scene Initialization",
    "title": "Table of Contents",
    "content": ". | Overview | Related Classes | . ",
    "url": "/miko-unity-docs/docs/Topics/scene_initalisation/#table-of-contents",
    
    "relUrl": "/docs/Topics/scene_initalisation/#table-of-contents"
  },"159": {
    "doc": "Scene Initialization",
    "title": "Overview",
    "content": "When the Scene initialises, BodykunController is in charge of creating the body and AddFBXController is in charge of setting the GameObject Structure so that we have access to the Joint GameObjects later, and performing additional setup on Bodykun. ",
    "url": "/miko-unity-docs/docs/Topics/scene_initalisation/#overview",
    
    "relUrl": "/docs/Topics/scene_initalisation/#overview"
  },"160": {
    "doc": "Scene Initialization",
    "title": "Related Classes",
    "content": "Poser Documentation: BodykunController Poser Documentation: AddFBXController . ",
    "url": "/miko-unity-docs/docs/Topics/scene_initalisation/#related-classes",
    
    "relUrl": "/docs/Topics/scene_initalisation/#related-classes"
  }
}
